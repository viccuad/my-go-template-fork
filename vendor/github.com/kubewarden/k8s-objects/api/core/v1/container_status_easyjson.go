// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8557f2baDecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *ContainerStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "containerID":
			out.ContainerID = string(in.String())
		case "image":
			if in.IsNull() {
				in.Skip()
				out.Image = nil
			} else {
				if out.Image == nil {
					out.Image = new(string)
				}
				*out.Image = string(in.String())
			}
		case "imageID":
			if in.IsNull() {
				in.Skip()
				out.ImageID = nil
			} else {
				if out.ImageID == nil {
					out.ImageID = new(string)
				}
				*out.ImageID = string(in.String())
			}
		case "lastState":
			if in.IsNull() {
				in.Skip()
				out.LastState = nil
			} else {
				if out.LastState == nil {
					out.LastState = new(ContainerState)
				}
				(*out.LastState).UnmarshalEasyJSON(in)
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "ready":
			if in.IsNull() {
				in.Skip()
				out.Ready = nil
			} else {
				if out.Ready == nil {
					out.Ready = new(bool)
				}
				*out.Ready = bool(in.Bool())
			}
		case "restartCount":
			if in.IsNull() {
				in.Skip()
				out.RestartCount = nil
			} else {
				if out.RestartCount == nil {
					out.RestartCount = new(int32)
				}
				*out.RestartCount = int32(in.Int32())
			}
		case "started":
			out.Started = bool(in.Bool())
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(ContainerState)
				}
				(*out.State).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8557f2baEncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in ContainerStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ContainerID != "" {
		const prefix string = ",\"containerID\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ContainerID))
	}
	{
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Image == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Image))
		}
	}
	{
		const prefix string = ",\"imageID\":"
		out.RawString(prefix)
		if in.ImageID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ImageID))
		}
	}
	if in.LastState != nil {
		const prefix string = ",\"lastState\":"
		out.RawString(prefix)
		(*in.LastState).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"ready\":"
		out.RawString(prefix)
		if in.Ready == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Ready))
		}
	}
	{
		const prefix string = ",\"restartCount\":"
		out.RawString(prefix)
		if in.RestartCount == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.RestartCount))
		}
	}
	if in.Started {
		const prefix string = ",\"started\":"
		out.RawString(prefix)
		out.Bool(bool(in.Started))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		(*in.State).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContainerStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8557f2baEncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContainerStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8557f2baEncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContainerStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8557f2baDecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContainerStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8557f2baDecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
