// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	resource "github.com/kubewarden/k8s-objects/apimachinery/pkg/api/resource"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *PersistentVolume) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(_v1.ObjectMeta)
				}
				(*out.Metadata).UnmarshalEasyJSON(in)
			}
		case "spec":
			if in.IsNull() {
				in.Skip()
				out.Spec = nil
			} else {
				if out.Spec == nil {
					out.Spec = new(PersistentVolumeSpec)
				}
				easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV11(in, out.Spec)
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(PersistentVolumeStatus)
				}
				easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV12(in, out.Status)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in PersistentVolume) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Metadata).MarshalEasyJSON(out)
	}
	if in.Spec != nil {
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV11(out, *in.Spec)
	}
	if in.Status != nil {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV12(out, *in.Status)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PersistentVolume) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PersistentVolume) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PersistentVolume) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PersistentVolume) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
func easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV12(in *jlexer.Lexer, out *PersistentVolumeStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "phase":
			out.Phase = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV12(out *jwriter.Writer, in PersistentVolumeStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Message != "" {
		const prefix string = ",\"message\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	if in.Phase != "" {
		const prefix string = ",\"phase\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Phase))
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Reason))
	}
	out.RawByte('}')
}
func easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV11(in *jlexer.Lexer, out *PersistentVolumeSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accessModes":
			if in.IsNull() {
				in.Skip()
				out.AccessModes = nil
			} else {
				in.Delim('[')
				if out.AccessModes == nil {
					if !in.IsDelim(']') {
						out.AccessModes = make([]string, 0, 4)
					} else {
						out.AccessModes = []string{}
					}
				} else {
					out.AccessModes = (out.AccessModes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.AccessModes = append(out.AccessModes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "awsElasticBlockStore":
			if in.IsNull() {
				in.Skip()
				out.AwsElasticBlockStore = nil
			} else {
				if out.AwsElasticBlockStore == nil {
					out.AwsElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				(*out.AwsElasticBlockStore).UnmarshalEasyJSON(in)
			}
		case "azureDisk":
			if in.IsNull() {
				in.Skip()
				out.AzureDisk = nil
			} else {
				if out.AzureDisk == nil {
					out.AzureDisk = new(AzureDiskVolumeSource)
				}
				(*out.AzureDisk).UnmarshalEasyJSON(in)
			}
		case "azureFile":
			if in.IsNull() {
				in.Skip()
				out.AzureFile = nil
			} else {
				if out.AzureFile == nil {
					out.AzureFile = new(AzureFilePersistentVolumeSource)
				}
				(*out.AzureFile).UnmarshalEasyJSON(in)
			}
		case "capacity":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Capacity = make(map[string]*resource.Quantity)
				} else {
					out.Capacity = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(resource.Quantity)
						}
						*v2 = resource.Quantity(in.String())
					}
					(out.Capacity)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "cephfs":
			if in.IsNull() {
				in.Skip()
				out.Cephfs = nil
			} else {
				if out.Cephfs == nil {
					out.Cephfs = new(CephFSPersistentVolumeSource)
				}
				(*out.Cephfs).UnmarshalEasyJSON(in)
			}
		case "cinder":
			if in.IsNull() {
				in.Skip()
				out.Cinder = nil
			} else {
				if out.Cinder == nil {
					out.Cinder = new(CinderPersistentVolumeSource)
				}
				(*out.Cinder).UnmarshalEasyJSON(in)
			}
		case "claimRef":
			if in.IsNull() {
				in.Skip()
				out.ClaimRef = nil
			} else {
				if out.ClaimRef == nil {
					out.ClaimRef = new(ObjectReference)
				}
				(*out.ClaimRef).UnmarshalEasyJSON(in)
			}
		case "csi":
			if in.IsNull() {
				in.Skip()
				out.Csi = nil
			} else {
				if out.Csi == nil {
					out.Csi = new(CSIPersistentVolumeSource)
				}
				(*out.Csi).UnmarshalEasyJSON(in)
			}
		case "fc":
			if in.IsNull() {
				in.Skip()
				out.Fc = nil
			} else {
				if out.Fc == nil {
					out.Fc = new(FCVolumeSource)
				}
				(*out.Fc).UnmarshalEasyJSON(in)
			}
		case "flexVolume":
			if in.IsNull() {
				in.Skip()
				out.FlexVolume = nil
			} else {
				if out.FlexVolume == nil {
					out.FlexVolume = new(FlexPersistentVolumeSource)
				}
				(*out.FlexVolume).UnmarshalEasyJSON(in)
			}
		case "flocker":
			if in.IsNull() {
				in.Skip()
				out.Flocker = nil
			} else {
				if out.Flocker == nil {
					out.Flocker = new(FlockerVolumeSource)
				}
				(*out.Flocker).UnmarshalEasyJSON(in)
			}
		case "gcePersistentDisk":
			if in.IsNull() {
				in.Skip()
				out.GcePersistentDisk = nil
			} else {
				if out.GcePersistentDisk == nil {
					out.GcePersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				(*out.GcePersistentDisk).UnmarshalEasyJSON(in)
			}
		case "glusterfs":
			if in.IsNull() {
				in.Skip()
				out.Glusterfs = nil
			} else {
				if out.Glusterfs == nil {
					out.Glusterfs = new(GlusterfsPersistentVolumeSource)
				}
				(*out.Glusterfs).UnmarshalEasyJSON(in)
			}
		case "hostPath":
			if in.IsNull() {
				in.Skip()
				out.HostPath = nil
			} else {
				if out.HostPath == nil {
					out.HostPath = new(HostPathVolumeSource)
				}
				(*out.HostPath).UnmarshalEasyJSON(in)
			}
		case "iscsi":
			if in.IsNull() {
				in.Skip()
				out.Iscsi = nil
			} else {
				if out.Iscsi == nil {
					out.Iscsi = new(ISCSIPersistentVolumeSource)
				}
				(*out.Iscsi).UnmarshalEasyJSON(in)
			}
		case "local":
			if in.IsNull() {
				in.Skip()
				out.Local = nil
			} else {
				if out.Local == nil {
					out.Local = new(LocalVolumeSource)
				}
				(*out.Local).UnmarshalEasyJSON(in)
			}
		case "mountOptions":
			if in.IsNull() {
				in.Skip()
				out.MountOptions = nil
			} else {
				in.Delim('[')
				if out.MountOptions == nil {
					if !in.IsDelim(']') {
						out.MountOptions = make([]string, 0, 4)
					} else {
						out.MountOptions = []string{}
					}
				} else {
					out.MountOptions = (out.MountOptions)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.MountOptions = append(out.MountOptions, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nfs":
			if in.IsNull() {
				in.Skip()
				out.Nfs = nil
			} else {
				if out.Nfs == nil {
					out.Nfs = new(NFSVolumeSource)
				}
				(*out.Nfs).UnmarshalEasyJSON(in)
			}
		case "nodeAffinity":
			if in.IsNull() {
				in.Skip()
				out.NodeAffinity = nil
			} else {
				if out.NodeAffinity == nil {
					out.NodeAffinity = new(VolumeNodeAffinity)
				}
				easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV13(in, out.NodeAffinity)
			}
		case "persistentVolumeReclaimPolicy":
			out.PersistentVolumeReclaimPolicy = string(in.String())
		case "photonPersistentDisk":
			if in.IsNull() {
				in.Skip()
				out.PhotonPersistentDisk = nil
			} else {
				if out.PhotonPersistentDisk == nil {
					out.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV14(in, out.PhotonPersistentDisk)
			}
		case "portworxVolume":
			if in.IsNull() {
				in.Skip()
				out.PortworxVolume = nil
			} else {
				if out.PortworxVolume == nil {
					out.PortworxVolume = new(PortworxVolumeSource)
				}
				easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV15(in, out.PortworxVolume)
			}
		case "quobyte":
			if in.IsNull() {
				in.Skip()
				out.Quobyte = nil
			} else {
				if out.Quobyte == nil {
					out.Quobyte = new(QuobyteVolumeSource)
				}
				easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV16(in, out.Quobyte)
			}
		case "rbd":
			if in.IsNull() {
				in.Skip()
				out.Rbd = nil
			} else {
				if out.Rbd == nil {
					out.Rbd = new(RBDPersistentVolumeSource)
				}
				easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV17(in, out.Rbd)
			}
		case "scaleIO":
			if in.IsNull() {
				in.Skip()
				out.ScaleIO = nil
			} else {
				if out.ScaleIO == nil {
					out.ScaleIO = new(ScaleIOPersistentVolumeSource)
				}
				easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV18(in, out.ScaleIO)
			}
		case "storageClassName":
			out.StorageClassName = string(in.String())
		case "storageos":
			if in.IsNull() {
				in.Skip()
				out.Storageos = nil
			} else {
				if out.Storageos == nil {
					out.Storageos = new(StorageOSPersistentVolumeSource)
				}
				easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV19(in, out.Storageos)
			}
		case "volumeMode":
			out.VolumeMode = string(in.String())
		case "vsphereVolume":
			if in.IsNull() {
				in.Skip()
				out.VsphereVolume = nil
			} else {
				if out.VsphereVolume == nil {
					out.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV110(in, out.VsphereVolume)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV11(out *jwriter.Writer, in PersistentVolumeSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AccessModes) != 0 {
		const prefix string = ",\"accessModes\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v4, v5 := range in.AccessModes {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	if in.AwsElasticBlockStore != nil {
		const prefix string = ",\"awsElasticBlockStore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AwsElasticBlockStore).MarshalEasyJSON(out)
	}
	if in.AzureDisk != nil {
		const prefix string = ",\"azureDisk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AzureDisk).MarshalEasyJSON(out)
	}
	if in.AzureFile != nil {
		const prefix string = ",\"azureFile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AzureFile).MarshalEasyJSON(out)
	}
	if len(in.Capacity) != 0 {
		const prefix string = ",\"capacity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Capacity {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				if v6Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v6Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Cephfs != nil {
		const prefix string = ",\"cephfs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Cephfs).MarshalEasyJSON(out)
	}
	if in.Cinder != nil {
		const prefix string = ",\"cinder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Cinder).MarshalEasyJSON(out)
	}
	if in.ClaimRef != nil {
		const prefix string = ",\"claimRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ClaimRef).MarshalEasyJSON(out)
	}
	if in.Csi != nil {
		const prefix string = ",\"csi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Csi).MarshalEasyJSON(out)
	}
	if in.Fc != nil {
		const prefix string = ",\"fc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Fc).MarshalEasyJSON(out)
	}
	if in.FlexVolume != nil {
		const prefix string = ",\"flexVolume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FlexVolume).MarshalEasyJSON(out)
	}
	if in.Flocker != nil {
		const prefix string = ",\"flocker\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Flocker).MarshalEasyJSON(out)
	}
	if in.GcePersistentDisk != nil {
		const prefix string = ",\"gcePersistentDisk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GcePersistentDisk).MarshalEasyJSON(out)
	}
	if in.Glusterfs != nil {
		const prefix string = ",\"glusterfs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Glusterfs).MarshalEasyJSON(out)
	}
	if in.HostPath != nil {
		const prefix string = ",\"hostPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.HostPath).MarshalEasyJSON(out)
	}
	if in.Iscsi != nil {
		const prefix string = ",\"iscsi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Iscsi).MarshalEasyJSON(out)
	}
	if in.Local != nil {
		const prefix string = ",\"local\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Local).MarshalEasyJSON(out)
	}
	if len(in.MountOptions) != 0 {
		const prefix string = ",\"mountOptions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.MountOptions {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	if in.Nfs != nil {
		const prefix string = ",\"nfs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Nfs).MarshalEasyJSON(out)
	}
	if in.NodeAffinity != nil {
		const prefix string = ",\"nodeAffinity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV13(out, *in.NodeAffinity)
	}
	if in.PersistentVolumeReclaimPolicy != "" {
		const prefix string = ",\"persistentVolumeReclaimPolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PersistentVolumeReclaimPolicy))
	}
	if in.PhotonPersistentDisk != nil {
		const prefix string = ",\"photonPersistentDisk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV14(out, *in.PhotonPersistentDisk)
	}
	if in.PortworxVolume != nil {
		const prefix string = ",\"portworxVolume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV15(out, *in.PortworxVolume)
	}
	if in.Quobyte != nil {
		const prefix string = ",\"quobyte\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV16(out, *in.Quobyte)
	}
	if in.Rbd != nil {
		const prefix string = ",\"rbd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV17(out, *in.Rbd)
	}
	if in.ScaleIO != nil {
		const prefix string = ",\"scaleIO\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV18(out, *in.ScaleIO)
	}
	if in.StorageClassName != "" {
		const prefix string = ",\"storageClassName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StorageClassName))
	}
	if in.Storageos != nil {
		const prefix string = ",\"storageos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV19(out, *in.Storageos)
	}
	if in.VolumeMode != "" {
		const prefix string = ",\"volumeMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VolumeMode))
	}
	if in.VsphereVolume != nil {
		const prefix string = ",\"vsphereVolume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV110(out, *in.VsphereVolume)
	}
	out.RawByte('}')
}
func easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV110(in *jlexer.Lexer, out *VsphereVirtualDiskVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fsType":
			out.FsType = string(in.String())
		case "storagePolicyID":
			out.StoragePolicyID = string(in.String())
		case "storagePolicyName":
			out.StoragePolicyName = string(in.String())
		case "volumePath":
			if in.IsNull() {
				in.Skip()
				out.VolumePath = nil
			} else {
				if out.VolumePath == nil {
					out.VolumePath = new(string)
				}
				*out.VolumePath = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV110(out *jwriter.Writer, in VsphereVirtualDiskVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FsType != "" {
		const prefix string = ",\"fsType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FsType))
	}
	if in.StoragePolicyID != "" {
		const prefix string = ",\"storagePolicyID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoragePolicyID))
	}
	if in.StoragePolicyName != "" {
		const prefix string = ",\"storagePolicyName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoragePolicyName))
	}
	{
		const prefix string = ",\"volumePath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.VolumePath == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.VolumePath))
		}
	}
	out.RawByte('}')
}
func easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV19(in *jlexer.Lexer, out *StorageOSPersistentVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fsType":
			out.FsType = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(ObjectReference)
				}
				(*out.SecretRef).UnmarshalEasyJSON(in)
			}
		case "volumeName":
			out.VolumeName = string(in.String())
		case "volumeNamespace":
			out.VolumeNamespace = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV19(out *jwriter.Writer, in StorageOSPersistentVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FsType != "" {
		const prefix string = ",\"fsType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FsType))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ReadOnly))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SecretRef).MarshalEasyJSON(out)
	}
	if in.VolumeName != "" {
		const prefix string = ",\"volumeName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VolumeName))
	}
	if in.VolumeNamespace != "" {
		const prefix string = ",\"volumeNamespace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VolumeNamespace))
	}
	out.RawByte('}')
}
func easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV18(in *jlexer.Lexer, out *ScaleIOPersistentVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fsType":
			out.FsType = string(in.String())
		case "gateway":
			if in.IsNull() {
				in.Skip()
				out.Gateway = nil
			} else {
				if out.Gateway == nil {
					out.Gateway = new(string)
				}
				*out.Gateway = string(in.String())
			}
		case "protectionDomain":
			out.ProtectionDomain = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(SecretReference)
				}
				easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV111(in, out.SecretRef)
			}
		case "sslEnabled":
			out.SslEnabled = bool(in.Bool())
		case "storageMode":
			out.StorageMode = string(in.String())
		case "storagePool":
			out.StoragePool = string(in.String())
		case "system":
			if in.IsNull() {
				in.Skip()
				out.System = nil
			} else {
				if out.System == nil {
					out.System = new(string)
				}
				*out.System = string(in.String())
			}
		case "volumeName":
			out.VolumeName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV18(out *jwriter.Writer, in ScaleIOPersistentVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FsType != "" {
		const prefix string = ",\"fsType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FsType))
	}
	{
		const prefix string = ",\"gateway\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Gateway == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Gateway))
		}
	}
	if in.ProtectionDomain != "" {
		const prefix string = ",\"protectionDomain\":"
		out.RawString(prefix)
		out.String(string(in.ProtectionDomain))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	{
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		if in.SecretRef == nil {
			out.RawString("null")
		} else {
			easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV111(out, *in.SecretRef)
		}
	}
	if in.SslEnabled {
		const prefix string = ",\"sslEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.SslEnabled))
	}
	if in.StorageMode != "" {
		const prefix string = ",\"storageMode\":"
		out.RawString(prefix)
		out.String(string(in.StorageMode))
	}
	if in.StoragePool != "" {
		const prefix string = ",\"storagePool\":"
		out.RawString(prefix)
		out.String(string(in.StoragePool))
	}
	{
		const prefix string = ",\"system\":"
		out.RawString(prefix)
		if in.System == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.System))
		}
	}
	if in.VolumeName != "" {
		const prefix string = ",\"volumeName\":"
		out.RawString(prefix)
		out.String(string(in.VolumeName))
	}
	out.RawByte('}')
}
func easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV111(in *jlexer.Lexer, out *SecretReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV111(out *jwriter.Writer, in SecretReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Namespace != "" {
		const prefix string = ",\"namespace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Namespace))
	}
	out.RawByte('}')
}
func easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV17(in *jlexer.Lexer, out *RBDPersistentVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fsType":
			out.FsType = string(in.String())
		case "image":
			if in.IsNull() {
				in.Skip()
				out.Image = nil
			} else {
				if out.Image == nil {
					out.Image = new(string)
				}
				*out.Image = string(in.String())
			}
		case "keyring":
			out.Keyring = string(in.String())
		case "monitors":
			if in.IsNull() {
				in.Skip()
				out.Monitors = nil
			} else {
				in.Delim('[')
				if out.Monitors == nil {
					if !in.IsDelim(']') {
						out.Monitors = make([]string, 0, 4)
					} else {
						out.Monitors = []string{}
					}
				} else {
					out.Monitors = (out.Monitors)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Monitors = append(out.Monitors, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pool":
			out.Pool = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(SecretReference)
				}
				easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV111(in, out.SecretRef)
			}
		case "user":
			out.User = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV17(out *jwriter.Writer, in RBDPersistentVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FsType != "" {
		const prefix string = ",\"fsType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FsType))
	}
	{
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Image == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Image))
		}
	}
	if in.Keyring != "" {
		const prefix string = ",\"keyring\":"
		out.RawString(prefix)
		out.String(string(in.Keyring))
	}
	{
		const prefix string = ",\"monitors\":"
		out.RawString(prefix)
		if in.Monitors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Monitors {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	if in.Pool != "" {
		const prefix string = ",\"pool\":"
		out.RawString(prefix)
		out.String(string(in.Pool))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV111(out, *in.SecretRef)
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	out.RawByte('}')
}
func easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV16(in *jlexer.Lexer, out *QuobyteVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			out.Group = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "registry":
			if in.IsNull() {
				in.Skip()
				out.Registry = nil
			} else {
				if out.Registry == nil {
					out.Registry = new(string)
				}
				*out.Registry = string(in.String())
			}
		case "tenant":
			out.Tenant = string(in.String())
		case "user":
			out.User = string(in.String())
		case "volume":
			if in.IsNull() {
				in.Skip()
				out.Volume = nil
			} else {
				if out.Volume == nil {
					out.Volume = new(string)
				}
				*out.Volume = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV16(out *jwriter.Writer, in QuobyteVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Group != "" {
		const prefix string = ",\"group\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Group))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ReadOnly))
	}
	{
		const prefix string = ",\"registry\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Registry == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Registry))
		}
	}
	if in.Tenant != "" {
		const prefix string = ",\"tenant\":"
		out.RawString(prefix)
		out.String(string(in.Tenant))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"volume\":"
		out.RawString(prefix)
		if in.Volume == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Volume))
		}
	}
	out.RawByte('}')
}
func easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV15(in *jlexer.Lexer, out *PortworxVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fsType":
			out.FsType = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "volumeID":
			if in.IsNull() {
				in.Skip()
				out.VolumeID = nil
			} else {
				if out.VolumeID == nil {
					out.VolumeID = new(string)
				}
				*out.VolumeID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV15(out *jwriter.Writer, in PortworxVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FsType != "" {
		const prefix string = ",\"fsType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FsType))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ReadOnly))
	}
	{
		const prefix string = ",\"volumeID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.VolumeID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.VolumeID))
		}
	}
	out.RawByte('}')
}
func easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV14(in *jlexer.Lexer, out *PhotonPersistentDiskVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fsType":
			out.FsType = string(in.String())
		case "pdID":
			if in.IsNull() {
				in.Skip()
				out.PdID = nil
			} else {
				if out.PdID == nil {
					out.PdID = new(string)
				}
				*out.PdID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV14(out *jwriter.Writer, in PhotonPersistentDiskVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FsType != "" {
		const prefix string = ",\"fsType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FsType))
	}
	{
		const prefix string = ",\"pdID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PdID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PdID))
		}
	}
	out.RawByte('}')
}
func easyjson88c26c72DecodeGithubComKubewardenK8sObjectsApiCoreV13(in *jlexer.Lexer, out *VolumeNodeAffinity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "required":
			if in.IsNull() {
				in.Skip()
				out.Required = nil
			} else {
				if out.Required == nil {
					out.Required = new(NodeSelector)
				}
				(*out.Required).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson88c26c72EncodeGithubComKubewardenK8sObjectsApiCoreV13(out *jwriter.Writer, in VolumeNodeAffinity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Required != nil {
		const prefix string = ",\"required\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Required).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
