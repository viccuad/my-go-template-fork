// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5b06c84aDecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *EnvFromSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "configMapRef":
			if in.IsNull() {
				in.Skip()
				out.ConfigMapRef = nil
			} else {
				if out.ConfigMapRef == nil {
					out.ConfigMapRef = new(ConfigMapEnvSource)
				}
				(*out.ConfigMapRef).UnmarshalEasyJSON(in)
			}
		case "prefix":
			out.Prefix = string(in.String())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(SecretEnvSource)
				}
				easyjson5b06c84aDecodeGithubComKubewardenK8sObjectsApiCoreV11(in, out.SecretRef)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5b06c84aEncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in EnvFromSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ConfigMapRef != nil {
		const prefix string = ",\"configMapRef\":"
		first = false
		out.RawString(prefix[1:])
		(*in.ConfigMapRef).MarshalEasyJSON(out)
	}
	if in.Prefix != "" {
		const prefix string = ",\"prefix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Prefix))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson5b06c84aEncodeGithubComKubewardenK8sObjectsApiCoreV11(out, *in.SecretRef)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EnvFromSource) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5b06c84aEncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EnvFromSource) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5b06c84aEncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EnvFromSource) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5b06c84aDecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EnvFromSource) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5b06c84aDecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
func easyjson5b06c84aDecodeGithubComKubewardenK8sObjectsApiCoreV11(in *jlexer.Lexer, out *SecretEnvSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "optional":
			out.Optional = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5b06c84aEncodeGithubComKubewardenK8sObjectsApiCoreV11(out *jwriter.Writer, in SecretEnvSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Optional {
		const prefix string = ",\"optional\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Optional))
	}
	out.RawByte('}')
}
