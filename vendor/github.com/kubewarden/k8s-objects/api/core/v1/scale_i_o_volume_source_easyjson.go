// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB379b9edDecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *ScaleIOVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fsType":
			out.FsType = string(in.String())
		case "gateway":
			if in.IsNull() {
				in.Skip()
				out.Gateway = nil
			} else {
				if out.Gateway == nil {
					out.Gateway = new(string)
				}
				*out.Gateway = string(in.String())
			}
		case "protectionDomain":
			out.ProtectionDomain = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(LocalObjectReference)
				}
				(*out.SecretRef).UnmarshalEasyJSON(in)
			}
		case "sslEnabled":
			out.SslEnabled = bool(in.Bool())
		case "storageMode":
			out.StorageMode = string(in.String())
		case "storagePool":
			out.StoragePool = string(in.String())
		case "system":
			if in.IsNull() {
				in.Skip()
				out.System = nil
			} else {
				if out.System == nil {
					out.System = new(string)
				}
				*out.System = string(in.String())
			}
		case "volumeName":
			out.VolumeName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB379b9edEncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in ScaleIOVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FsType != "" {
		const prefix string = ",\"fsType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FsType))
	}
	{
		const prefix string = ",\"gateway\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Gateway == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Gateway))
		}
	}
	if in.ProtectionDomain != "" {
		const prefix string = ",\"protectionDomain\":"
		out.RawString(prefix)
		out.String(string(in.ProtectionDomain))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	{
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		if in.SecretRef == nil {
			out.RawString("null")
		} else {
			(*in.SecretRef).MarshalEasyJSON(out)
		}
	}
	if in.SslEnabled {
		const prefix string = ",\"sslEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.SslEnabled))
	}
	if in.StorageMode != "" {
		const prefix string = ",\"storageMode\":"
		out.RawString(prefix)
		out.String(string(in.StorageMode))
	}
	if in.StoragePool != "" {
		const prefix string = ",\"storagePool\":"
		out.RawString(prefix)
		out.String(string(in.StoragePool))
	}
	{
		const prefix string = ",\"system\":"
		out.RawString(prefix)
		if in.System == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.System))
		}
	}
	if in.VolumeName != "" {
		const prefix string = ",\"volumeName\":"
		out.RawString(prefix)
		out.String(string(in.VolumeName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScaleIOVolumeSource) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB379b9edEncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScaleIOVolumeSource) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB379b9edEncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScaleIOVolumeSource) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB379b9edDecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScaleIOVolumeSource) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB379b9edDecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
