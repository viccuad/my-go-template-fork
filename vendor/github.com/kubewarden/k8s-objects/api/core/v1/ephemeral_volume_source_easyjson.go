// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	resource "github.com/kubewarden/k8s-objects/apimachinery/pkg/api/resource"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7b20a2cDecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *EphemeralVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "volumeClaimTemplate":
			if in.IsNull() {
				in.Skip()
				out.VolumeClaimTemplate = nil
			} else {
				if out.VolumeClaimTemplate == nil {
					out.VolumeClaimTemplate = new(PersistentVolumeClaimTemplate)
				}
				easyjson7b20a2cDecodeGithubComKubewardenK8sObjectsApiCoreV11(in, out.VolumeClaimTemplate)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b20a2cEncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in EphemeralVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.VolumeClaimTemplate != nil {
		const prefix string = ",\"volumeClaimTemplate\":"
		first = false
		out.RawString(prefix[1:])
		easyjson7b20a2cEncodeGithubComKubewardenK8sObjectsApiCoreV11(out, *in.VolumeClaimTemplate)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EphemeralVolumeSource) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7b20a2cEncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EphemeralVolumeSource) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7b20a2cEncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EphemeralVolumeSource) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7b20a2cDecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EphemeralVolumeSource) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7b20a2cDecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
func easyjson7b20a2cDecodeGithubComKubewardenK8sObjectsApiCoreV11(in *jlexer.Lexer, out *PersistentVolumeClaimTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(_v1.ObjectMeta)
				}
				(*out.Metadata).UnmarshalEasyJSON(in)
			}
		case "spec":
			if in.IsNull() {
				in.Skip()
				out.Spec = nil
			} else {
				if out.Spec == nil {
					out.Spec = new(PersistentVolumeClaimSpec)
				}
				easyjson7b20a2cDecodeGithubComKubewardenK8sObjectsApiCoreV12(in, out.Spec)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b20a2cEncodeGithubComKubewardenK8sObjectsApiCoreV11(out *jwriter.Writer, in PersistentVolumeClaimTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Spec == nil {
			out.RawString("null")
		} else {
			easyjson7b20a2cEncodeGithubComKubewardenK8sObjectsApiCoreV12(out, *in.Spec)
		}
	}
	out.RawByte('}')
}
func easyjson7b20a2cDecodeGithubComKubewardenK8sObjectsApiCoreV12(in *jlexer.Lexer, out *PersistentVolumeClaimSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accessModes":
			if in.IsNull() {
				in.Skip()
				out.AccessModes = nil
			} else {
				in.Delim('[')
				if out.AccessModes == nil {
					if !in.IsDelim(']') {
						out.AccessModes = make([]string, 0, 4)
					} else {
						out.AccessModes = []string{}
					}
				} else {
					out.AccessModes = (out.AccessModes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.AccessModes = append(out.AccessModes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dataSource":
			if in.IsNull() {
				in.Skip()
				out.DataSource = nil
			} else {
				if out.DataSource == nil {
					out.DataSource = new(TypedLocalObjectReference)
				}
				easyjson7b20a2cDecodeGithubComKubewardenK8sObjectsApiCoreV13(in, out.DataSource)
			}
		case "dataSourceRef":
			if in.IsNull() {
				in.Skip()
				out.DataSourceRef = nil
			} else {
				if out.DataSourceRef == nil {
					out.DataSourceRef = new(TypedLocalObjectReference)
				}
				easyjson7b20a2cDecodeGithubComKubewardenK8sObjectsApiCoreV13(in, out.DataSourceRef)
			}
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				if out.Resources == nil {
					out.Resources = new(ResourceRequirements)
				}
				easyjson7b20a2cDecodeGithubComKubewardenK8sObjectsApiCoreV14(in, out.Resources)
			}
		case "selector":
			if in.IsNull() {
				in.Skip()
				out.Selector = nil
			} else {
				if out.Selector == nil {
					out.Selector = new(_v1.LabelSelector)
				}
				(*out.Selector).UnmarshalEasyJSON(in)
			}
		case "storageClassName":
			out.StorageClassName = string(in.String())
		case "volumeMode":
			out.VolumeMode = string(in.String())
		case "volumeName":
			out.VolumeName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b20a2cEncodeGithubComKubewardenK8sObjectsApiCoreV12(out *jwriter.Writer, in PersistentVolumeClaimSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AccessModes) != 0 {
		const prefix string = ",\"accessModes\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.AccessModes {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	if in.DataSource != nil {
		const prefix string = ",\"dataSource\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7b20a2cEncodeGithubComKubewardenK8sObjectsApiCoreV13(out, *in.DataSource)
	}
	if in.DataSourceRef != nil {
		const prefix string = ",\"dataSourceRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7b20a2cEncodeGithubComKubewardenK8sObjectsApiCoreV13(out, *in.DataSourceRef)
	}
	if in.Resources != nil {
		const prefix string = ",\"resources\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7b20a2cEncodeGithubComKubewardenK8sObjectsApiCoreV14(out, *in.Resources)
	}
	if in.Selector != nil {
		const prefix string = ",\"selector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Selector).MarshalEasyJSON(out)
	}
	if in.StorageClassName != "" {
		const prefix string = ",\"storageClassName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StorageClassName))
	}
	if in.VolumeMode != "" {
		const prefix string = ",\"volumeMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VolumeMode))
	}
	if in.VolumeName != "" {
		const prefix string = ",\"volumeName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VolumeName))
	}
	out.RawByte('}')
}
func easyjson7b20a2cDecodeGithubComKubewardenK8sObjectsApiCoreV14(in *jlexer.Lexer, out *ResourceRequirements) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limits":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Limits = make(map[string]*resource.Quantity)
				} else {
					out.Limits = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(resource.Quantity)
						}
						*v4 = resource.Quantity(in.String())
					}
					(out.Limits)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "requests":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Requests = make(map[string]*resource.Quantity)
				} else {
					out.Requests = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(resource.Quantity)
						}
						*v5 = resource.Quantity(in.String())
					}
					(out.Requests)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b20a2cEncodeGithubComKubewardenK8sObjectsApiCoreV14(out *jwriter.Writer, in ResourceRequirements) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Limits) != 0 {
		const prefix string = ",\"limits\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Limits {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				if v6Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v6Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Requests) != 0 {
		const prefix string = ",\"requests\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Requests {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				if v7Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v7Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson7b20a2cDecodeGithubComKubewardenK8sObjectsApiCoreV13(in *jlexer.Lexer, out *TypedLocalObjectReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiGroup":
			out.APIGroup = string(in.String())
		case "kind":
			if in.IsNull() {
				in.Skip()
				out.Kind = nil
			} else {
				if out.Kind == nil {
					out.Kind = new(string)
				}
				*out.Kind = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7b20a2cEncodeGithubComKubewardenK8sObjectsApiCoreV13(out *jwriter.Writer, in TypedLocalObjectReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIGroup != "" {
		const prefix string = ",\"apiGroup\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIGroup))
	}
	{
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Kind == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Kind))
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	out.RawByte('}')
}
