// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	resource "github.com/kubewarden/k8s-objects/apimachinery/pkg/api/resource"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *PodSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "activeDeadlineSeconds":
			out.ActiveDeadlineSeconds = int64(in.Int64())
		case "affinity":
			if in.IsNull() {
				in.Skip()
				out.Affinity = nil
			} else {
				if out.Affinity == nil {
					out.Affinity = new(Affinity)
				}
				(*out.Affinity).UnmarshalEasyJSON(in)
			}
		case "automountServiceAccountToken":
			out.AutomountServiceAccountToken = bool(in.Bool())
		case "containers":
			if in.IsNull() {
				in.Skip()
				out.Containers = nil
			} else {
				in.Delim('[')
				if out.Containers == nil {
					if !in.IsDelim(']') {
						out.Containers = make([]*Container, 0, 8)
					} else {
						out.Containers = []*Container{}
					}
				} else {
					out.Containers = (out.Containers)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Container
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Container)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Containers = append(out.Containers, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dnsConfig":
			if in.IsNull() {
				in.Skip()
				out.DNSConfig = nil
			} else {
				if out.DNSConfig == nil {
					out.DNSConfig = new(PodDNSConfig)
				}
				(*out.DNSConfig).UnmarshalEasyJSON(in)
			}
		case "dnsPolicy":
			out.DNSPolicy = string(in.String())
		case "enableServiceLinks":
			out.EnableServiceLinks = bool(in.Bool())
		case "ephemeralContainers":
			if in.IsNull() {
				in.Skip()
				out.EphemeralContainers = nil
			} else {
				in.Delim('[')
				if out.EphemeralContainers == nil {
					if !in.IsDelim(']') {
						out.EphemeralContainers = make([]*EphemeralContainer, 0, 8)
					} else {
						out.EphemeralContainers = []*EphemeralContainer{}
					}
				} else {
					out.EphemeralContainers = (out.EphemeralContainers)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *EphemeralContainer
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(EphemeralContainer)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.EphemeralContainers = append(out.EphemeralContainers, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hostAliases":
			if in.IsNull() {
				in.Skip()
				out.HostAliases = nil
			} else {
				in.Delim('[')
				if out.HostAliases == nil {
					if !in.IsDelim(']') {
						out.HostAliases = make([]*HostAlias, 0, 8)
					} else {
						out.HostAliases = []*HostAlias{}
					}
				} else {
					out.HostAliases = (out.HostAliases)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *HostAlias
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(HostAlias)
						}
						(*v3).UnmarshalEasyJSON(in)
					}
					out.HostAliases = append(out.HostAliases, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hostIPC":
			out.HostIPC = bool(in.Bool())
		case "hostNetwork":
			out.HostNetwork = bool(in.Bool())
		case "hostPID":
			out.HostPID = bool(in.Bool())
		case "hostname":
			out.Hostname = string(in.String())
		case "imagePullSecrets":
			if in.IsNull() {
				in.Skip()
				out.ImagePullSecrets = nil
			} else {
				in.Delim('[')
				if out.ImagePullSecrets == nil {
					if !in.IsDelim(']') {
						out.ImagePullSecrets = make([]*LocalObjectReference, 0, 8)
					} else {
						out.ImagePullSecrets = []*LocalObjectReference{}
					}
				} else {
					out.ImagePullSecrets = (out.ImagePullSecrets)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *LocalObjectReference
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(LocalObjectReference)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.ImagePullSecrets = append(out.ImagePullSecrets, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "initContainers":
			if in.IsNull() {
				in.Skip()
				out.InitContainers = nil
			} else {
				in.Delim('[')
				if out.InitContainers == nil {
					if !in.IsDelim(']') {
						out.InitContainers = make([]*Container, 0, 8)
					} else {
						out.InitContainers = []*Container{}
					}
				} else {
					out.InitContainers = (out.InitContainers)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *Container
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(Container)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.InitContainers = append(out.InitContainers, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nodeName":
			out.NodeName = string(in.String())
		case "nodeSelector":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.NodeSelector = make(map[string]string)
				} else {
					out.NodeSelector = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 string
					v6 = string(in.String())
					(out.NodeSelector)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "os":
			if in.IsNull() {
				in.Skip()
				out.Os = nil
			} else {
				if out.Os == nil {
					out.Os = new(PodOS)
				}
				(*out.Os).UnmarshalEasyJSON(in)
			}
		case "overhead":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Overhead = make(map[string]*resource.Quantity)
				} else {
					out.Overhead = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(resource.Quantity)
						}
						*v7 = resource.Quantity(in.String())
					}
					(out.Overhead)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "preemptionPolicy":
			out.PreemptionPolicy = string(in.String())
		case "priority":
			out.Priority = int32(in.Int32())
		case "priorityClassName":
			out.PriorityClassName = string(in.String())
		case "readinessGates":
			if in.IsNull() {
				in.Skip()
				out.ReadinessGates = nil
			} else {
				in.Delim('[')
				if out.ReadinessGates == nil {
					if !in.IsDelim(']') {
						out.ReadinessGates = make([]*PodReadinessGate, 0, 8)
					} else {
						out.ReadinessGates = []*PodReadinessGate{}
					}
				} else {
					out.ReadinessGates = (out.ReadinessGates)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *PodReadinessGate
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(PodReadinessGate)
						}
						(*v8).UnmarshalEasyJSON(in)
					}
					out.ReadinessGates = append(out.ReadinessGates, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "restartPolicy":
			out.RestartPolicy = string(in.String())
		case "runtimeClassName":
			out.RuntimeClassName = string(in.String())
		case "schedulerName":
			out.SchedulerName = string(in.String())
		case "securityContext":
			if in.IsNull() {
				in.Skip()
				out.SecurityContext = nil
			} else {
				if out.SecurityContext == nil {
					out.SecurityContext = new(PodSecurityContext)
				}
				(*out.SecurityContext).UnmarshalEasyJSON(in)
			}
		case "serviceAccount":
			out.ServiceAccount = string(in.String())
		case "serviceAccountName":
			out.ServiceAccountName = string(in.String())
		case "setHostnameAsFQDN":
			out.SetHostnameAsFQDN = bool(in.Bool())
		case "shareProcessNamespace":
			out.ShareProcessNamespace = bool(in.Bool())
		case "subdomain":
			out.Subdomain = string(in.String())
		case "terminationGracePeriodSeconds":
			out.TerminationGracePeriodSeconds = int64(in.Int64())
		case "tolerations":
			if in.IsNull() {
				in.Skip()
				out.Tolerations = nil
			} else {
				in.Delim('[')
				if out.Tolerations == nil {
					if !in.IsDelim(']') {
						out.Tolerations = make([]*Toleration, 0, 8)
					} else {
						out.Tolerations = []*Toleration{}
					}
				} else {
					out.Tolerations = (out.Tolerations)[:0]
				}
				for !in.IsDelim(']') {
					var v9 *Toleration
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						if v9 == nil {
							v9 = new(Toleration)
						}
						easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV11(in, v9)
					}
					out.Tolerations = append(out.Tolerations, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topologySpreadConstraints":
			if in.IsNull() {
				in.Skip()
				out.TopologySpreadConstraints = nil
			} else {
				in.Delim('[')
				if out.TopologySpreadConstraints == nil {
					if !in.IsDelim(']') {
						out.TopologySpreadConstraints = make([]*TopologySpreadConstraint, 0, 8)
					} else {
						out.TopologySpreadConstraints = []*TopologySpreadConstraint{}
					}
				} else {
					out.TopologySpreadConstraints = (out.TopologySpreadConstraints)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *TopologySpreadConstraint
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(TopologySpreadConstraint)
						}
						easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV12(in, v10)
					}
					out.TopologySpreadConstraints = append(out.TopologySpreadConstraints, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "volumes":
			if in.IsNull() {
				in.Skip()
				out.Volumes = nil
			} else {
				in.Delim('[')
				if out.Volumes == nil {
					if !in.IsDelim(']') {
						out.Volumes = make([]*Volume, 0, 8)
					} else {
						out.Volumes = []*Volume{}
					}
				} else {
					out.Volumes = (out.Volumes)[:0]
				}
				for !in.IsDelim(']') {
					var v11 *Volume
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(Volume)
						}
						easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV13(in, v11)
					}
					out.Volumes = append(out.Volumes, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in PodSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ActiveDeadlineSeconds != 0 {
		const prefix string = ",\"activeDeadlineSeconds\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ActiveDeadlineSeconds))
	}
	if in.Affinity != nil {
		const prefix string = ",\"affinity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Affinity).MarshalEasyJSON(out)
	}
	if in.AutomountServiceAccountToken {
		const prefix string = ",\"automountServiceAccountToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AutomountServiceAccountToken))
	}
	{
		const prefix string = ",\"containers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Containers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Containers {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					(*v13).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.DNSConfig != nil {
		const prefix string = ",\"dnsConfig\":"
		out.RawString(prefix)
		(*in.DNSConfig).MarshalEasyJSON(out)
	}
	if in.DNSPolicy != "" {
		const prefix string = ",\"dnsPolicy\":"
		out.RawString(prefix)
		out.String(string(in.DNSPolicy))
	}
	if in.EnableServiceLinks {
		const prefix string = ",\"enableServiceLinks\":"
		out.RawString(prefix)
		out.Bool(bool(in.EnableServiceLinks))
	}
	if len(in.EphemeralContainers) != 0 {
		const prefix string = ",\"ephemeralContainers\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v14, v15 := range in.EphemeralContainers {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.HostAliases) != 0 {
		const prefix string = ",\"hostAliases\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v16, v17 := range in.HostAliases {
				if v16 > 0 {
					out.RawByte(',')
				}
				if v17 == nil {
					out.RawString("null")
				} else {
					(*v17).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.HostIPC {
		const prefix string = ",\"hostIPC\":"
		out.RawString(prefix)
		out.Bool(bool(in.HostIPC))
	}
	if in.HostNetwork {
		const prefix string = ",\"hostNetwork\":"
		out.RawString(prefix)
		out.Bool(bool(in.HostNetwork))
	}
	if in.HostPID {
		const prefix string = ",\"hostPID\":"
		out.RawString(prefix)
		out.Bool(bool(in.HostPID))
	}
	if in.Hostname != "" {
		const prefix string = ",\"hostname\":"
		out.RawString(prefix)
		out.String(string(in.Hostname))
	}
	if len(in.ImagePullSecrets) != 0 {
		const prefix string = ",\"imagePullSecrets\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v18, v19 := range in.ImagePullSecrets {
				if v18 > 0 {
					out.RawByte(',')
				}
				if v19 == nil {
					out.RawString("null")
				} else {
					(*v19).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.InitContainers) != 0 {
		const prefix string = ",\"initContainers\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v20, v21 := range in.InitContainers {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					(*v21).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.NodeName != "" {
		const prefix string = ",\"nodeName\":"
		out.RawString(prefix)
		out.String(string(in.NodeName))
	}
	if len(in.NodeSelector) != 0 {
		const prefix string = ",\"nodeSelector\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.NodeSelector {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				out.String(string(v22Value))
			}
			out.RawByte('}')
		}
	}
	if in.Os != nil {
		const prefix string = ",\"os\":"
		out.RawString(prefix)
		(*in.Os).MarshalEasyJSON(out)
	}
	if len(in.Overhead) != 0 {
		const prefix string = ",\"overhead\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v23First := true
			for v23Name, v23Value := range in.Overhead {
				if v23First {
					v23First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v23Name))
				out.RawByte(':')
				if v23Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v23Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.PreemptionPolicy != "" {
		const prefix string = ",\"preemptionPolicy\":"
		out.RawString(prefix)
		out.String(string(in.PreemptionPolicy))
	}
	if in.Priority != 0 {
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int32(int32(in.Priority))
	}
	if in.PriorityClassName != "" {
		const prefix string = ",\"priorityClassName\":"
		out.RawString(prefix)
		out.String(string(in.PriorityClassName))
	}
	if len(in.ReadinessGates) != 0 {
		const prefix string = ",\"readinessGates\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v24, v25 := range in.ReadinessGates {
				if v24 > 0 {
					out.RawByte(',')
				}
				if v25 == nil {
					out.RawString("null")
				} else {
					(*v25).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.RestartPolicy != "" {
		const prefix string = ",\"restartPolicy\":"
		out.RawString(prefix)
		out.String(string(in.RestartPolicy))
	}
	if in.RuntimeClassName != "" {
		const prefix string = ",\"runtimeClassName\":"
		out.RawString(prefix)
		out.String(string(in.RuntimeClassName))
	}
	if in.SchedulerName != "" {
		const prefix string = ",\"schedulerName\":"
		out.RawString(prefix)
		out.String(string(in.SchedulerName))
	}
	if in.SecurityContext != nil {
		const prefix string = ",\"securityContext\":"
		out.RawString(prefix)
		(*in.SecurityContext).MarshalEasyJSON(out)
	}
	if in.ServiceAccount != "" {
		const prefix string = ",\"serviceAccount\":"
		out.RawString(prefix)
		out.String(string(in.ServiceAccount))
	}
	if in.ServiceAccountName != "" {
		const prefix string = ",\"serviceAccountName\":"
		out.RawString(prefix)
		out.String(string(in.ServiceAccountName))
	}
	if in.SetHostnameAsFQDN {
		const prefix string = ",\"setHostnameAsFQDN\":"
		out.RawString(prefix)
		out.Bool(bool(in.SetHostnameAsFQDN))
	}
	if in.ShareProcessNamespace {
		const prefix string = ",\"shareProcessNamespace\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShareProcessNamespace))
	}
	if in.Subdomain != "" {
		const prefix string = ",\"subdomain\":"
		out.RawString(prefix)
		out.String(string(in.Subdomain))
	}
	if in.TerminationGracePeriodSeconds != 0 {
		const prefix string = ",\"terminationGracePeriodSeconds\":"
		out.RawString(prefix)
		out.Int64(int64(in.TerminationGracePeriodSeconds))
	}
	if len(in.Tolerations) != 0 {
		const prefix string = ",\"tolerations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v26, v27 := range in.Tolerations {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV11(out, *v27)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.TopologySpreadConstraints) != 0 {
		const prefix string = ",\"topologySpreadConstraints\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v28, v29 := range in.TopologySpreadConstraints {
				if v28 > 0 {
					out.RawByte(',')
				}
				if v29 == nil {
					out.RawString("null")
				} else {
					easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV12(out, *v29)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Volumes) != 0 {
		const prefix string = ",\"volumes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v30, v31 := range in.Volumes {
				if v30 > 0 {
					out.RawByte(',')
				}
				if v31 == nil {
					out.RawString("null")
				} else {
					easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV13(out, *v31)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PodSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PodSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PodSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PodSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
func easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV13(in *jlexer.Lexer, out *Volume) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "awsElasticBlockStore":
			if in.IsNull() {
				in.Skip()
				out.AwsElasticBlockStore = nil
			} else {
				if out.AwsElasticBlockStore == nil {
					out.AwsElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				(*out.AwsElasticBlockStore).UnmarshalEasyJSON(in)
			}
		case "azureDisk":
			if in.IsNull() {
				in.Skip()
				out.AzureDisk = nil
			} else {
				if out.AzureDisk == nil {
					out.AzureDisk = new(AzureDiskVolumeSource)
				}
				(*out.AzureDisk).UnmarshalEasyJSON(in)
			}
		case "azureFile":
			if in.IsNull() {
				in.Skip()
				out.AzureFile = nil
			} else {
				if out.AzureFile == nil {
					out.AzureFile = new(AzureFileVolumeSource)
				}
				(*out.AzureFile).UnmarshalEasyJSON(in)
			}
		case "cephfs":
			if in.IsNull() {
				in.Skip()
				out.Cephfs = nil
			} else {
				if out.Cephfs == nil {
					out.Cephfs = new(CephFSVolumeSource)
				}
				(*out.Cephfs).UnmarshalEasyJSON(in)
			}
		case "cinder":
			if in.IsNull() {
				in.Skip()
				out.Cinder = nil
			} else {
				if out.Cinder == nil {
					out.Cinder = new(CinderVolumeSource)
				}
				(*out.Cinder).UnmarshalEasyJSON(in)
			}
		case "configMap":
			if in.IsNull() {
				in.Skip()
				out.ConfigMap = nil
			} else {
				if out.ConfigMap == nil {
					out.ConfigMap = new(ConfigMapVolumeSource)
				}
				(*out.ConfigMap).UnmarshalEasyJSON(in)
			}
		case "csi":
			if in.IsNull() {
				in.Skip()
				out.Csi = nil
			} else {
				if out.Csi == nil {
					out.Csi = new(CSIVolumeSource)
				}
				(*out.Csi).UnmarshalEasyJSON(in)
			}
		case "downwardAPI":
			if in.IsNull() {
				in.Skip()
				out.DownwardAPI = nil
			} else {
				if out.DownwardAPI == nil {
					out.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				(*out.DownwardAPI).UnmarshalEasyJSON(in)
			}
		case "emptyDir":
			if in.IsNull() {
				in.Skip()
				out.EmptyDir = nil
			} else {
				if out.EmptyDir == nil {
					out.EmptyDir = new(EmptyDirVolumeSource)
				}
				(*out.EmptyDir).UnmarshalEasyJSON(in)
			}
		case "ephemeral":
			if in.IsNull() {
				in.Skip()
				out.Ephemeral = nil
			} else {
				if out.Ephemeral == nil {
					out.Ephemeral = new(EphemeralVolumeSource)
				}
				(*out.Ephemeral).UnmarshalEasyJSON(in)
			}
		case "fc":
			if in.IsNull() {
				in.Skip()
				out.Fc = nil
			} else {
				if out.Fc == nil {
					out.Fc = new(FCVolumeSource)
				}
				(*out.Fc).UnmarshalEasyJSON(in)
			}
		case "flexVolume":
			if in.IsNull() {
				in.Skip()
				out.FlexVolume = nil
			} else {
				if out.FlexVolume == nil {
					out.FlexVolume = new(FlexVolumeSource)
				}
				(*out.FlexVolume).UnmarshalEasyJSON(in)
			}
		case "flocker":
			if in.IsNull() {
				in.Skip()
				out.Flocker = nil
			} else {
				if out.Flocker == nil {
					out.Flocker = new(FlockerVolumeSource)
				}
				(*out.Flocker).UnmarshalEasyJSON(in)
			}
		case "gcePersistentDisk":
			if in.IsNull() {
				in.Skip()
				out.GcePersistentDisk = nil
			} else {
				if out.GcePersistentDisk == nil {
					out.GcePersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				(*out.GcePersistentDisk).UnmarshalEasyJSON(in)
			}
		case "gitRepo":
			if in.IsNull() {
				in.Skip()
				out.GitRepo = nil
			} else {
				if out.GitRepo == nil {
					out.GitRepo = new(GitRepoVolumeSource)
				}
				(*out.GitRepo).UnmarshalEasyJSON(in)
			}
		case "glusterfs":
			if in.IsNull() {
				in.Skip()
				out.Glusterfs = nil
			} else {
				if out.Glusterfs == nil {
					out.Glusterfs = new(GlusterfsVolumeSource)
				}
				(*out.Glusterfs).UnmarshalEasyJSON(in)
			}
		case "hostPath":
			if in.IsNull() {
				in.Skip()
				out.HostPath = nil
			} else {
				if out.HostPath == nil {
					out.HostPath = new(HostPathVolumeSource)
				}
				(*out.HostPath).UnmarshalEasyJSON(in)
			}
		case "iscsi":
			if in.IsNull() {
				in.Skip()
				out.Iscsi = nil
			} else {
				if out.Iscsi == nil {
					out.Iscsi = new(ISCSIVolumeSource)
				}
				(*out.Iscsi).UnmarshalEasyJSON(in)
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "nfs":
			if in.IsNull() {
				in.Skip()
				out.Nfs = nil
			} else {
				if out.Nfs == nil {
					out.Nfs = new(NFSVolumeSource)
				}
				(*out.Nfs).UnmarshalEasyJSON(in)
			}
		case "persistentVolumeClaim":
			if in.IsNull() {
				in.Skip()
				out.PersistentVolumeClaim = nil
			} else {
				if out.PersistentVolumeClaim == nil {
					out.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				(*out.PersistentVolumeClaim).UnmarshalEasyJSON(in)
			}
		case "photonPersistentDisk":
			if in.IsNull() {
				in.Skip()
				out.PhotonPersistentDisk = nil
			} else {
				if out.PhotonPersistentDisk == nil {
					out.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				(*out.PhotonPersistentDisk).UnmarshalEasyJSON(in)
			}
		case "portworxVolume":
			if in.IsNull() {
				in.Skip()
				out.PortworxVolume = nil
			} else {
				if out.PortworxVolume == nil {
					out.PortworxVolume = new(PortworxVolumeSource)
				}
				easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV14(in, out.PortworxVolume)
			}
		case "projected":
			if in.IsNull() {
				in.Skip()
				out.Projected = nil
			} else {
				if out.Projected == nil {
					out.Projected = new(ProjectedVolumeSource)
				}
				easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV15(in, out.Projected)
			}
		case "quobyte":
			if in.IsNull() {
				in.Skip()
				out.Quobyte = nil
			} else {
				if out.Quobyte == nil {
					out.Quobyte = new(QuobyteVolumeSource)
				}
				easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV16(in, out.Quobyte)
			}
		case "rbd":
			if in.IsNull() {
				in.Skip()
				out.Rbd = nil
			} else {
				if out.Rbd == nil {
					out.Rbd = new(RBDVolumeSource)
				}
				easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV17(in, out.Rbd)
			}
		case "scaleIO":
			if in.IsNull() {
				in.Skip()
				out.ScaleIO = nil
			} else {
				if out.ScaleIO == nil {
					out.ScaleIO = new(ScaleIOVolumeSource)
				}
				easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV18(in, out.ScaleIO)
			}
		case "secret":
			if in.IsNull() {
				in.Skip()
				out.Secret = nil
			} else {
				if out.Secret == nil {
					out.Secret = new(SecretVolumeSource)
				}
				easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV19(in, out.Secret)
			}
		case "storageos":
			if in.IsNull() {
				in.Skip()
				out.Storageos = nil
			} else {
				if out.Storageos == nil {
					out.Storageos = new(StorageOSVolumeSource)
				}
				easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV110(in, out.Storageos)
			}
		case "vsphereVolume":
			if in.IsNull() {
				in.Skip()
				out.VsphereVolume = nil
			} else {
				if out.VsphereVolume == nil {
					out.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV111(in, out.VsphereVolume)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV13(out *jwriter.Writer, in Volume) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AwsElasticBlockStore != nil {
		const prefix string = ",\"awsElasticBlockStore\":"
		first = false
		out.RawString(prefix[1:])
		(*in.AwsElasticBlockStore).MarshalEasyJSON(out)
	}
	if in.AzureDisk != nil {
		const prefix string = ",\"azureDisk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AzureDisk).MarshalEasyJSON(out)
	}
	if in.AzureFile != nil {
		const prefix string = ",\"azureFile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AzureFile).MarshalEasyJSON(out)
	}
	if in.Cephfs != nil {
		const prefix string = ",\"cephfs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Cephfs).MarshalEasyJSON(out)
	}
	if in.Cinder != nil {
		const prefix string = ",\"cinder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Cinder).MarshalEasyJSON(out)
	}
	if in.ConfigMap != nil {
		const prefix string = ",\"configMap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ConfigMap).MarshalEasyJSON(out)
	}
	if in.Csi != nil {
		const prefix string = ",\"csi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Csi).MarshalEasyJSON(out)
	}
	if in.DownwardAPI != nil {
		const prefix string = ",\"downwardAPI\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DownwardAPI).MarshalEasyJSON(out)
	}
	if in.EmptyDir != nil {
		const prefix string = ",\"emptyDir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EmptyDir).MarshalEasyJSON(out)
	}
	if in.Ephemeral != nil {
		const prefix string = ",\"ephemeral\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ephemeral).MarshalEasyJSON(out)
	}
	if in.Fc != nil {
		const prefix string = ",\"fc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Fc).MarshalEasyJSON(out)
	}
	if in.FlexVolume != nil {
		const prefix string = ",\"flexVolume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FlexVolume).MarshalEasyJSON(out)
	}
	if in.Flocker != nil {
		const prefix string = ",\"flocker\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Flocker).MarshalEasyJSON(out)
	}
	if in.GcePersistentDisk != nil {
		const prefix string = ",\"gcePersistentDisk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GcePersistentDisk).MarshalEasyJSON(out)
	}
	if in.GitRepo != nil {
		const prefix string = ",\"gitRepo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GitRepo).MarshalEasyJSON(out)
	}
	if in.Glusterfs != nil {
		const prefix string = ",\"glusterfs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Glusterfs).MarshalEasyJSON(out)
	}
	if in.HostPath != nil {
		const prefix string = ",\"hostPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.HostPath).MarshalEasyJSON(out)
	}
	if in.Iscsi != nil {
		const prefix string = ",\"iscsi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Iscsi).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	if in.Nfs != nil {
		const prefix string = ",\"nfs\":"
		out.RawString(prefix)
		(*in.Nfs).MarshalEasyJSON(out)
	}
	if in.PersistentVolumeClaim != nil {
		const prefix string = ",\"persistentVolumeClaim\":"
		out.RawString(prefix)
		(*in.PersistentVolumeClaim).MarshalEasyJSON(out)
	}
	if in.PhotonPersistentDisk != nil {
		const prefix string = ",\"photonPersistentDisk\":"
		out.RawString(prefix)
		(*in.PhotonPersistentDisk).MarshalEasyJSON(out)
	}
	if in.PortworxVolume != nil {
		const prefix string = ",\"portworxVolume\":"
		out.RawString(prefix)
		easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV14(out, *in.PortworxVolume)
	}
	if in.Projected != nil {
		const prefix string = ",\"projected\":"
		out.RawString(prefix)
		easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV15(out, *in.Projected)
	}
	if in.Quobyte != nil {
		const prefix string = ",\"quobyte\":"
		out.RawString(prefix)
		easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV16(out, *in.Quobyte)
	}
	if in.Rbd != nil {
		const prefix string = ",\"rbd\":"
		out.RawString(prefix)
		easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV17(out, *in.Rbd)
	}
	if in.ScaleIO != nil {
		const prefix string = ",\"scaleIO\":"
		out.RawString(prefix)
		easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV18(out, *in.ScaleIO)
	}
	if in.Secret != nil {
		const prefix string = ",\"secret\":"
		out.RawString(prefix)
		easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV19(out, *in.Secret)
	}
	if in.Storageos != nil {
		const prefix string = ",\"storageos\":"
		out.RawString(prefix)
		easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV110(out, *in.Storageos)
	}
	if in.VsphereVolume != nil {
		const prefix string = ",\"vsphereVolume\":"
		out.RawString(prefix)
		easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV111(out, *in.VsphereVolume)
	}
	out.RawByte('}')
}
func easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV111(in *jlexer.Lexer, out *VsphereVirtualDiskVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fsType":
			out.FsType = string(in.String())
		case "storagePolicyID":
			out.StoragePolicyID = string(in.String())
		case "storagePolicyName":
			out.StoragePolicyName = string(in.String())
		case "volumePath":
			if in.IsNull() {
				in.Skip()
				out.VolumePath = nil
			} else {
				if out.VolumePath == nil {
					out.VolumePath = new(string)
				}
				*out.VolumePath = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV111(out *jwriter.Writer, in VsphereVirtualDiskVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FsType != "" {
		const prefix string = ",\"fsType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FsType))
	}
	if in.StoragePolicyID != "" {
		const prefix string = ",\"storagePolicyID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoragePolicyID))
	}
	if in.StoragePolicyName != "" {
		const prefix string = ",\"storagePolicyName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoragePolicyName))
	}
	{
		const prefix string = ",\"volumePath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.VolumePath == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.VolumePath))
		}
	}
	out.RawByte('}')
}
func easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV110(in *jlexer.Lexer, out *StorageOSVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fsType":
			out.FsType = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(LocalObjectReference)
				}
				(*out.SecretRef).UnmarshalEasyJSON(in)
			}
		case "volumeName":
			out.VolumeName = string(in.String())
		case "volumeNamespace":
			out.VolumeNamespace = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV110(out *jwriter.Writer, in StorageOSVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FsType != "" {
		const prefix string = ",\"fsType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FsType))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ReadOnly))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SecretRef).MarshalEasyJSON(out)
	}
	if in.VolumeName != "" {
		const prefix string = ",\"volumeName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VolumeName))
	}
	if in.VolumeNamespace != "" {
		const prefix string = ",\"volumeNamespace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VolumeNamespace))
	}
	out.RawByte('}')
}
func easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV19(in *jlexer.Lexer, out *SecretVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "defaultMode":
			out.DefaultMode = int32(in.Int32())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]*KeyToPath, 0, 8)
					} else {
						out.Items = []*KeyToPath{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v32 *KeyToPath
					if in.IsNull() {
						in.Skip()
						v32 = nil
					} else {
						if v32 == nil {
							v32 = new(KeyToPath)
						}
						(*v32).UnmarshalEasyJSON(in)
					}
					out.Items = append(out.Items, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "optional":
			out.Optional = bool(in.Bool())
		case "secretName":
			out.SecretName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV19(out *jwriter.Writer, in SecretVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DefaultMode != 0 {
		const prefix string = ",\"defaultMode\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.DefaultMode))
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v33, v34 := range in.Items {
				if v33 > 0 {
					out.RawByte(',')
				}
				if v34 == nil {
					out.RawString("null")
				} else {
					(*v34).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Optional {
		const prefix string = ",\"optional\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Optional))
	}
	if in.SecretName != "" {
		const prefix string = ",\"secretName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SecretName))
	}
	out.RawByte('}')
}
func easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV18(in *jlexer.Lexer, out *ScaleIOVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fsType":
			out.FsType = string(in.String())
		case "gateway":
			if in.IsNull() {
				in.Skip()
				out.Gateway = nil
			} else {
				if out.Gateway == nil {
					out.Gateway = new(string)
				}
				*out.Gateway = string(in.String())
			}
		case "protectionDomain":
			out.ProtectionDomain = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(LocalObjectReference)
				}
				(*out.SecretRef).UnmarshalEasyJSON(in)
			}
		case "sslEnabled":
			out.SslEnabled = bool(in.Bool())
		case "storageMode":
			out.StorageMode = string(in.String())
		case "storagePool":
			out.StoragePool = string(in.String())
		case "system":
			if in.IsNull() {
				in.Skip()
				out.System = nil
			} else {
				if out.System == nil {
					out.System = new(string)
				}
				*out.System = string(in.String())
			}
		case "volumeName":
			out.VolumeName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV18(out *jwriter.Writer, in ScaleIOVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FsType != "" {
		const prefix string = ",\"fsType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FsType))
	}
	{
		const prefix string = ",\"gateway\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Gateway == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Gateway))
		}
	}
	if in.ProtectionDomain != "" {
		const prefix string = ",\"protectionDomain\":"
		out.RawString(prefix)
		out.String(string(in.ProtectionDomain))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	{
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		if in.SecretRef == nil {
			out.RawString("null")
		} else {
			(*in.SecretRef).MarshalEasyJSON(out)
		}
	}
	if in.SslEnabled {
		const prefix string = ",\"sslEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.SslEnabled))
	}
	if in.StorageMode != "" {
		const prefix string = ",\"storageMode\":"
		out.RawString(prefix)
		out.String(string(in.StorageMode))
	}
	if in.StoragePool != "" {
		const prefix string = ",\"storagePool\":"
		out.RawString(prefix)
		out.String(string(in.StoragePool))
	}
	{
		const prefix string = ",\"system\":"
		out.RawString(prefix)
		if in.System == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.System))
		}
	}
	if in.VolumeName != "" {
		const prefix string = ",\"volumeName\":"
		out.RawString(prefix)
		out.String(string(in.VolumeName))
	}
	out.RawByte('}')
}
func easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV17(in *jlexer.Lexer, out *RBDVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fsType":
			out.FsType = string(in.String())
		case "image":
			if in.IsNull() {
				in.Skip()
				out.Image = nil
			} else {
				if out.Image == nil {
					out.Image = new(string)
				}
				*out.Image = string(in.String())
			}
		case "keyring":
			out.Keyring = string(in.String())
		case "monitors":
			if in.IsNull() {
				in.Skip()
				out.Monitors = nil
			} else {
				in.Delim('[')
				if out.Monitors == nil {
					if !in.IsDelim(']') {
						out.Monitors = make([]string, 0, 4)
					} else {
						out.Monitors = []string{}
					}
				} else {
					out.Monitors = (out.Monitors)[:0]
				}
				for !in.IsDelim(']') {
					var v35 string
					v35 = string(in.String())
					out.Monitors = append(out.Monitors, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pool":
			out.Pool = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(LocalObjectReference)
				}
				(*out.SecretRef).UnmarshalEasyJSON(in)
			}
		case "user":
			out.User = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV17(out *jwriter.Writer, in RBDVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FsType != "" {
		const prefix string = ",\"fsType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FsType))
	}
	{
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Image == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Image))
		}
	}
	if in.Keyring != "" {
		const prefix string = ",\"keyring\":"
		out.RawString(prefix)
		out.String(string(in.Keyring))
	}
	{
		const prefix string = ",\"monitors\":"
		out.RawString(prefix)
		if in.Monitors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Monitors {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.String(string(v37))
			}
			out.RawByte(']')
		}
	}
	if in.Pool != "" {
		const prefix string = ",\"pool\":"
		out.RawString(prefix)
		out.String(string(in.Pool))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		(*in.SecretRef).MarshalEasyJSON(out)
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	out.RawByte('}')
}
func easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV16(in *jlexer.Lexer, out *QuobyteVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			out.Group = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "registry":
			if in.IsNull() {
				in.Skip()
				out.Registry = nil
			} else {
				if out.Registry == nil {
					out.Registry = new(string)
				}
				*out.Registry = string(in.String())
			}
		case "tenant":
			out.Tenant = string(in.String())
		case "user":
			out.User = string(in.String())
		case "volume":
			if in.IsNull() {
				in.Skip()
				out.Volume = nil
			} else {
				if out.Volume == nil {
					out.Volume = new(string)
				}
				*out.Volume = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV16(out *jwriter.Writer, in QuobyteVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Group != "" {
		const prefix string = ",\"group\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Group))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ReadOnly))
	}
	{
		const prefix string = ",\"registry\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Registry == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Registry))
		}
	}
	if in.Tenant != "" {
		const prefix string = ",\"tenant\":"
		out.RawString(prefix)
		out.String(string(in.Tenant))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"volume\":"
		out.RawString(prefix)
		if in.Volume == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Volume))
		}
	}
	out.RawByte('}')
}
func easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV15(in *jlexer.Lexer, out *ProjectedVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "defaultMode":
			out.DefaultMode = int32(in.Int32())
		case "sources":
			if in.IsNull() {
				in.Skip()
				out.Sources = nil
			} else {
				in.Delim('[')
				if out.Sources == nil {
					if !in.IsDelim(']') {
						out.Sources = make([]*VolumeProjection, 0, 8)
					} else {
						out.Sources = []*VolumeProjection{}
					}
				} else {
					out.Sources = (out.Sources)[:0]
				}
				for !in.IsDelim(']') {
					var v38 *VolumeProjection
					if in.IsNull() {
						in.Skip()
						v38 = nil
					} else {
						if v38 == nil {
							v38 = new(VolumeProjection)
						}
						easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV112(in, v38)
					}
					out.Sources = append(out.Sources, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV15(out *jwriter.Writer, in ProjectedVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DefaultMode != 0 {
		const prefix string = ",\"defaultMode\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.DefaultMode))
	}
	if len(in.Sources) != 0 {
		const prefix string = ",\"sources\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v39, v40 := range in.Sources {
				if v39 > 0 {
					out.RawByte(',')
				}
				if v40 == nil {
					out.RawString("null")
				} else {
					easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV112(out, *v40)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV112(in *jlexer.Lexer, out *VolumeProjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "configMap":
			if in.IsNull() {
				in.Skip()
				out.ConfigMap = nil
			} else {
				if out.ConfigMap == nil {
					out.ConfigMap = new(ConfigMapProjection)
				}
				(*out.ConfigMap).UnmarshalEasyJSON(in)
			}
		case "downwardAPI":
			if in.IsNull() {
				in.Skip()
				out.DownwardAPI = nil
			} else {
				if out.DownwardAPI == nil {
					out.DownwardAPI = new(DownwardAPIProjection)
				}
				(*out.DownwardAPI).UnmarshalEasyJSON(in)
			}
		case "secret":
			if in.IsNull() {
				in.Skip()
				out.Secret = nil
			} else {
				if out.Secret == nil {
					out.Secret = new(SecretProjection)
				}
				easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV113(in, out.Secret)
			}
		case "serviceAccountToken":
			if in.IsNull() {
				in.Skip()
				out.ServiceAccountToken = nil
			} else {
				if out.ServiceAccountToken == nil {
					out.ServiceAccountToken = new(ServiceAccountTokenProjection)
				}
				easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV114(in, out.ServiceAccountToken)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV112(out *jwriter.Writer, in VolumeProjection) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ConfigMap != nil {
		const prefix string = ",\"configMap\":"
		first = false
		out.RawString(prefix[1:])
		(*in.ConfigMap).MarshalEasyJSON(out)
	}
	if in.DownwardAPI != nil {
		const prefix string = ",\"downwardAPI\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DownwardAPI).MarshalEasyJSON(out)
	}
	if in.Secret != nil {
		const prefix string = ",\"secret\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV113(out, *in.Secret)
	}
	if in.ServiceAccountToken != nil {
		const prefix string = ",\"serviceAccountToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV114(out, *in.ServiceAccountToken)
	}
	out.RawByte('}')
}
func easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV114(in *jlexer.Lexer, out *ServiceAccountTokenProjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "audience":
			out.Audience = string(in.String())
		case "expirationSeconds":
			out.ExpirationSeconds = int64(in.Int64())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				if out.Path == nil {
					out.Path = new(string)
				}
				*out.Path = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV114(out *jwriter.Writer, in ServiceAccountTokenProjection) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Audience != "" {
		const prefix string = ",\"audience\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Audience))
	}
	if in.ExpirationSeconds != 0 {
		const prefix string = ",\"expirationSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ExpirationSeconds))
	}
	{
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Path == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Path))
		}
	}
	out.RawByte('}')
}
func easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV113(in *jlexer.Lexer, out *SecretProjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]*KeyToPath, 0, 8)
					} else {
						out.Items = []*KeyToPath{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v41 *KeyToPath
					if in.IsNull() {
						in.Skip()
						v41 = nil
					} else {
						if v41 == nil {
							v41 = new(KeyToPath)
						}
						(*v41).UnmarshalEasyJSON(in)
					}
					out.Items = append(out.Items, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = string(in.String())
		case "optional":
			out.Optional = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV113(out *jwriter.Writer, in SecretProjection) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v42, v43 := range in.Items {
				if v42 > 0 {
					out.RawByte(',')
				}
				if v43 == nil {
					out.RawString("null")
				} else {
					(*v43).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Optional {
		const prefix string = ",\"optional\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Optional))
	}
	out.RawByte('}')
}
func easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV14(in *jlexer.Lexer, out *PortworxVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fsType":
			out.FsType = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "volumeID":
			if in.IsNull() {
				in.Skip()
				out.VolumeID = nil
			} else {
				if out.VolumeID == nil {
					out.VolumeID = new(string)
				}
				*out.VolumeID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV14(out *jwriter.Writer, in PortworxVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FsType != "" {
		const prefix string = ",\"fsType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FsType))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ReadOnly))
	}
	{
		const prefix string = ",\"volumeID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.VolumeID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.VolumeID))
		}
	}
	out.RawByte('}')
}
func easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV12(in *jlexer.Lexer, out *TopologySpreadConstraint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "labelSelector":
			if in.IsNull() {
				in.Skip()
				out.LabelSelector = nil
			} else {
				if out.LabelSelector == nil {
					out.LabelSelector = new(_v1.LabelSelector)
				}
				(*out.LabelSelector).UnmarshalEasyJSON(in)
			}
		case "maxSkew":
			if in.IsNull() {
				in.Skip()
				out.MaxSkew = nil
			} else {
				if out.MaxSkew == nil {
					out.MaxSkew = new(int32)
				}
				*out.MaxSkew = int32(in.Int32())
			}
		case "minDomains":
			out.MinDomains = int32(in.Int32())
		case "topologyKey":
			if in.IsNull() {
				in.Skip()
				out.TopologyKey = nil
			} else {
				if out.TopologyKey == nil {
					out.TopologyKey = new(string)
				}
				*out.TopologyKey = string(in.String())
			}
		case "whenUnsatisfiable":
			if in.IsNull() {
				in.Skip()
				out.WhenUnsatisfiable = nil
			} else {
				if out.WhenUnsatisfiable == nil {
					out.WhenUnsatisfiable = new(string)
				}
				*out.WhenUnsatisfiable = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV12(out *jwriter.Writer, in TopologySpreadConstraint) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LabelSelector != nil {
		const prefix string = ",\"labelSelector\":"
		first = false
		out.RawString(prefix[1:])
		(*in.LabelSelector).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"maxSkew\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MaxSkew == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.MaxSkew))
		}
	}
	if in.MinDomains != 0 {
		const prefix string = ",\"minDomains\":"
		out.RawString(prefix)
		out.Int32(int32(in.MinDomains))
	}
	{
		const prefix string = ",\"topologyKey\":"
		out.RawString(prefix)
		if in.TopologyKey == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.TopologyKey))
		}
	}
	{
		const prefix string = ",\"whenUnsatisfiable\":"
		out.RawString(prefix)
		if in.WhenUnsatisfiable == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.WhenUnsatisfiable))
		}
	}
	out.RawByte('}')
}
func easyjsonA34d1d2dDecodeGithubComKubewardenK8sObjectsApiCoreV11(in *jlexer.Lexer, out *Toleration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "effect":
			out.Effect = string(in.String())
		case "key":
			out.Key = string(in.String())
		case "operator":
			out.Operator = string(in.String())
		case "tolerationSeconds":
			out.TolerationSeconds = int64(in.Int64())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA34d1d2dEncodeGithubComKubewardenK8sObjectsApiCoreV11(out *jwriter.Writer, in Toleration) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Effect != "" {
		const prefix string = ",\"effect\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Effect))
	}
	if in.Key != "" {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	if in.Operator != "" {
		const prefix string = ",\"operator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Operator))
	}
	if in.TolerationSeconds != 0 {
		const prefix string = ",\"tolerationSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TolerationSeconds))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
