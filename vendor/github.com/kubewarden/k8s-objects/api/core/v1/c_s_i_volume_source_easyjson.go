// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson105e4b9cDecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *CSIVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "driver":
			if in.IsNull() {
				in.Skip()
				out.Driver = nil
			} else {
				if out.Driver == nil {
					out.Driver = new(string)
				}
				*out.Driver = string(in.String())
			}
		case "fsType":
			out.FsType = string(in.String())
		case "nodePublishSecretRef":
			if in.IsNull() {
				in.Skip()
				out.NodePublishSecretRef = nil
			} else {
				if out.NodePublishSecretRef == nil {
					out.NodePublishSecretRef = new(LocalObjectReference)
				}
				easyjson105e4b9cDecodeGithubComKubewardenK8sObjectsApiCoreV11(in, out.NodePublishSecretRef)
			}
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "volumeAttributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.VolumeAttributes = make(map[string]string)
				} else {
					out.VolumeAttributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.VolumeAttributes)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson105e4b9cEncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in CSIVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"driver\":"
		out.RawString(prefix[1:])
		if in.Driver == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Driver))
		}
	}
	if in.FsType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FsType))
	}
	if in.NodePublishSecretRef != nil {
		const prefix string = ",\"nodePublishSecretRef\":"
		out.RawString(prefix)
		easyjson105e4b9cEncodeGithubComKubewardenK8sObjectsApiCoreV11(out, *in.NodePublishSecretRef)
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	if len(in.VolumeAttributes) != 0 {
		const prefix string = ",\"volumeAttributes\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.VolumeAttributes {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				out.String(string(v2Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSIVolumeSource) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson105e4b9cEncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSIVolumeSource) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson105e4b9cEncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSIVolumeSource) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson105e4b9cDecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSIVolumeSource) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson105e4b9cDecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
func easyjson105e4b9cDecodeGithubComKubewardenK8sObjectsApiCoreV11(in *jlexer.Lexer, out *LocalObjectReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson105e4b9cEncodeGithubComKubewardenK8sObjectsApiCoreV11(out *jwriter.Writer, in LocalObjectReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
