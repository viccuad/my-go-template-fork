// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5fdbc764DecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *PodAffinity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.PreferredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.PreferredDuringSchedulingIgnoredDuringExecution = make([]*WeightedPodAffinityTerm, 0, 8)
					} else {
						out.PreferredDuringSchedulingIgnoredDuringExecution = []*WeightedPodAffinityTerm{}
					}
				} else {
					out.PreferredDuringSchedulingIgnoredDuringExecution = (out.PreferredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *WeightedPodAffinityTerm
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(WeightedPodAffinityTerm)
						}
						easyjson5fdbc764DecodeGithubComKubewardenK8sObjectsApiCoreV11(in, v1)
					}
					out.PreferredDuringSchedulingIgnoredDuringExecution = append(out.PreferredDuringSchedulingIgnoredDuringExecution, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.RequiredDuringSchedulingIgnoredDuringExecution = make([]*PodAffinityTerm, 0, 8)
					} else {
						out.RequiredDuringSchedulingIgnoredDuringExecution = []*PodAffinityTerm{}
					}
				} else {
					out.RequiredDuringSchedulingIgnoredDuringExecution = (out.RequiredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *PodAffinityTerm
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(PodAffinityTerm)
						}
						easyjson5fdbc764DecodeGithubComKubewardenK8sObjectsApiCoreV12(in, v2)
					}
					out.RequiredDuringSchedulingIgnoredDuringExecution = append(out.RequiredDuringSchedulingIgnoredDuringExecution, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5fdbc764EncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in PodAffinity) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.PreferredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"preferredDuringSchedulingIgnoredDuringExecution\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v3, v4 := range in.PreferredDuringSchedulingIgnoredDuringExecution {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					easyjson5fdbc764EncodeGithubComKubewardenK8sObjectsApiCoreV11(out, *v4)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.RequiredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"requiredDuringSchedulingIgnoredDuringExecution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.RequiredDuringSchedulingIgnoredDuringExecution {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					easyjson5fdbc764EncodeGithubComKubewardenK8sObjectsApiCoreV12(out, *v6)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PodAffinity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5fdbc764EncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PodAffinity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5fdbc764EncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PodAffinity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5fdbc764DecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PodAffinity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5fdbc764DecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
func easyjson5fdbc764DecodeGithubComKubewardenK8sObjectsApiCoreV12(in *jlexer.Lexer, out *PodAffinityTerm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "labelSelector":
			if in.IsNull() {
				in.Skip()
				out.LabelSelector = nil
			} else {
				if out.LabelSelector == nil {
					out.LabelSelector = new(_v1.LabelSelector)
				}
				(*out.LabelSelector).UnmarshalEasyJSON(in)
			}
		case "namespaceSelector":
			if in.IsNull() {
				in.Skip()
				out.NamespaceSelector = nil
			} else {
				if out.NamespaceSelector == nil {
					out.NamespaceSelector = new(_v1.LabelSelector)
				}
				(*out.NamespaceSelector).UnmarshalEasyJSON(in)
			}
		case "namespaces":
			if in.IsNull() {
				in.Skip()
				out.Namespaces = nil
			} else {
				in.Delim('[')
				if out.Namespaces == nil {
					if !in.IsDelim(']') {
						out.Namespaces = make([]string, 0, 4)
					} else {
						out.Namespaces = []string{}
					}
				} else {
					out.Namespaces = (out.Namespaces)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Namespaces = append(out.Namespaces, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topologyKey":
			if in.IsNull() {
				in.Skip()
				out.TopologyKey = nil
			} else {
				if out.TopologyKey == nil {
					out.TopologyKey = new(string)
				}
				*out.TopologyKey = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5fdbc764EncodeGithubComKubewardenK8sObjectsApiCoreV12(out *jwriter.Writer, in PodAffinityTerm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LabelSelector != nil {
		const prefix string = ",\"labelSelector\":"
		first = false
		out.RawString(prefix[1:])
		(*in.LabelSelector).MarshalEasyJSON(out)
	}
	if in.NamespaceSelector != nil {
		const prefix string = ",\"namespaceSelector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NamespaceSelector).MarshalEasyJSON(out)
	}
	if len(in.Namespaces) != 0 {
		const prefix string = ",\"namespaces\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Namespaces {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"topologyKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.TopologyKey == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.TopologyKey))
		}
	}
	out.RawByte('}')
}
func easyjson5fdbc764DecodeGithubComKubewardenK8sObjectsApiCoreV11(in *jlexer.Lexer, out *WeightedPodAffinityTerm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "podAffinityTerm":
			if in.IsNull() {
				in.Skip()
				out.PodAffinityTerm = nil
			} else {
				if out.PodAffinityTerm == nil {
					out.PodAffinityTerm = new(PodAffinityTerm)
				}
				easyjson5fdbc764DecodeGithubComKubewardenK8sObjectsApiCoreV12(in, out.PodAffinityTerm)
			}
		case "weight":
			if in.IsNull() {
				in.Skip()
				out.Weight = nil
			} else {
				if out.Weight == nil {
					out.Weight = new(int32)
				}
				*out.Weight = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5fdbc764EncodeGithubComKubewardenK8sObjectsApiCoreV11(out *jwriter.Writer, in WeightedPodAffinityTerm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"podAffinityTerm\":"
		out.RawString(prefix[1:])
		if in.PodAffinityTerm == nil {
			out.RawString("null")
		} else {
			easyjson5fdbc764EncodeGithubComKubewardenK8sObjectsApiCoreV12(out, *in.PodAffinityTerm)
		}
	}
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		if in.Weight == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.Weight))
		}
	}
	out.RawByte('}')
}
