// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson88542aDecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *Volume) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "awsElasticBlockStore":
			if in.IsNull() {
				in.Skip()
				out.AwsElasticBlockStore = nil
			} else {
				if out.AwsElasticBlockStore == nil {
					out.AwsElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				(*out.AwsElasticBlockStore).UnmarshalEasyJSON(in)
			}
		case "azureDisk":
			if in.IsNull() {
				in.Skip()
				out.AzureDisk = nil
			} else {
				if out.AzureDisk == nil {
					out.AzureDisk = new(AzureDiskVolumeSource)
				}
				(*out.AzureDisk).UnmarshalEasyJSON(in)
			}
		case "azureFile":
			if in.IsNull() {
				in.Skip()
				out.AzureFile = nil
			} else {
				if out.AzureFile == nil {
					out.AzureFile = new(AzureFileVolumeSource)
				}
				(*out.AzureFile).UnmarshalEasyJSON(in)
			}
		case "cephfs":
			if in.IsNull() {
				in.Skip()
				out.Cephfs = nil
			} else {
				if out.Cephfs == nil {
					out.Cephfs = new(CephFSVolumeSource)
				}
				(*out.Cephfs).UnmarshalEasyJSON(in)
			}
		case "cinder":
			if in.IsNull() {
				in.Skip()
				out.Cinder = nil
			} else {
				if out.Cinder == nil {
					out.Cinder = new(CinderVolumeSource)
				}
				(*out.Cinder).UnmarshalEasyJSON(in)
			}
		case "configMap":
			if in.IsNull() {
				in.Skip()
				out.ConfigMap = nil
			} else {
				if out.ConfigMap == nil {
					out.ConfigMap = new(ConfigMapVolumeSource)
				}
				(*out.ConfigMap).UnmarshalEasyJSON(in)
			}
		case "csi":
			if in.IsNull() {
				in.Skip()
				out.Csi = nil
			} else {
				if out.Csi == nil {
					out.Csi = new(CSIVolumeSource)
				}
				(*out.Csi).UnmarshalEasyJSON(in)
			}
		case "downwardAPI":
			if in.IsNull() {
				in.Skip()
				out.DownwardAPI = nil
			} else {
				if out.DownwardAPI == nil {
					out.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				(*out.DownwardAPI).UnmarshalEasyJSON(in)
			}
		case "emptyDir":
			if in.IsNull() {
				in.Skip()
				out.EmptyDir = nil
			} else {
				if out.EmptyDir == nil {
					out.EmptyDir = new(EmptyDirVolumeSource)
				}
				(*out.EmptyDir).UnmarshalEasyJSON(in)
			}
		case "ephemeral":
			if in.IsNull() {
				in.Skip()
				out.Ephemeral = nil
			} else {
				if out.Ephemeral == nil {
					out.Ephemeral = new(EphemeralVolumeSource)
				}
				(*out.Ephemeral).UnmarshalEasyJSON(in)
			}
		case "fc":
			if in.IsNull() {
				in.Skip()
				out.Fc = nil
			} else {
				if out.Fc == nil {
					out.Fc = new(FCVolumeSource)
				}
				(*out.Fc).UnmarshalEasyJSON(in)
			}
		case "flexVolume":
			if in.IsNull() {
				in.Skip()
				out.FlexVolume = nil
			} else {
				if out.FlexVolume == nil {
					out.FlexVolume = new(FlexVolumeSource)
				}
				(*out.FlexVolume).UnmarshalEasyJSON(in)
			}
		case "flocker":
			if in.IsNull() {
				in.Skip()
				out.Flocker = nil
			} else {
				if out.Flocker == nil {
					out.Flocker = new(FlockerVolumeSource)
				}
				(*out.Flocker).UnmarshalEasyJSON(in)
			}
		case "gcePersistentDisk":
			if in.IsNull() {
				in.Skip()
				out.GcePersistentDisk = nil
			} else {
				if out.GcePersistentDisk == nil {
					out.GcePersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				(*out.GcePersistentDisk).UnmarshalEasyJSON(in)
			}
		case "gitRepo":
			if in.IsNull() {
				in.Skip()
				out.GitRepo = nil
			} else {
				if out.GitRepo == nil {
					out.GitRepo = new(GitRepoVolumeSource)
				}
				(*out.GitRepo).UnmarshalEasyJSON(in)
			}
		case "glusterfs":
			if in.IsNull() {
				in.Skip()
				out.Glusterfs = nil
			} else {
				if out.Glusterfs == nil {
					out.Glusterfs = new(GlusterfsVolumeSource)
				}
				(*out.Glusterfs).UnmarshalEasyJSON(in)
			}
		case "hostPath":
			if in.IsNull() {
				in.Skip()
				out.HostPath = nil
			} else {
				if out.HostPath == nil {
					out.HostPath = new(HostPathVolumeSource)
				}
				(*out.HostPath).UnmarshalEasyJSON(in)
			}
		case "iscsi":
			if in.IsNull() {
				in.Skip()
				out.Iscsi = nil
			} else {
				if out.Iscsi == nil {
					out.Iscsi = new(ISCSIVolumeSource)
				}
				(*out.Iscsi).UnmarshalEasyJSON(in)
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "nfs":
			if in.IsNull() {
				in.Skip()
				out.Nfs = nil
			} else {
				if out.Nfs == nil {
					out.Nfs = new(NFSVolumeSource)
				}
				(*out.Nfs).UnmarshalEasyJSON(in)
			}
		case "persistentVolumeClaim":
			if in.IsNull() {
				in.Skip()
				out.PersistentVolumeClaim = nil
			} else {
				if out.PersistentVolumeClaim == nil {
					out.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				(*out.PersistentVolumeClaim).UnmarshalEasyJSON(in)
			}
		case "photonPersistentDisk":
			if in.IsNull() {
				in.Skip()
				out.PhotonPersistentDisk = nil
			} else {
				if out.PhotonPersistentDisk == nil {
					out.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				(*out.PhotonPersistentDisk).UnmarshalEasyJSON(in)
			}
		case "portworxVolume":
			if in.IsNull() {
				in.Skip()
				out.PortworxVolume = nil
			} else {
				if out.PortworxVolume == nil {
					out.PortworxVolume = new(PortworxVolumeSource)
				}
				(*out.PortworxVolume).UnmarshalEasyJSON(in)
			}
		case "projected":
			if in.IsNull() {
				in.Skip()
				out.Projected = nil
			} else {
				if out.Projected == nil {
					out.Projected = new(ProjectedVolumeSource)
				}
				(*out.Projected).UnmarshalEasyJSON(in)
			}
		case "quobyte":
			if in.IsNull() {
				in.Skip()
				out.Quobyte = nil
			} else {
				if out.Quobyte == nil {
					out.Quobyte = new(QuobyteVolumeSource)
				}
				(*out.Quobyte).UnmarshalEasyJSON(in)
			}
		case "rbd":
			if in.IsNull() {
				in.Skip()
				out.Rbd = nil
			} else {
				if out.Rbd == nil {
					out.Rbd = new(RBDVolumeSource)
				}
				(*out.Rbd).UnmarshalEasyJSON(in)
			}
		case "scaleIO":
			if in.IsNull() {
				in.Skip()
				out.ScaleIO = nil
			} else {
				if out.ScaleIO == nil {
					out.ScaleIO = new(ScaleIOVolumeSource)
				}
				(*out.ScaleIO).UnmarshalEasyJSON(in)
			}
		case "secret":
			if in.IsNull() {
				in.Skip()
				out.Secret = nil
			} else {
				if out.Secret == nil {
					out.Secret = new(SecretVolumeSource)
				}
				(*out.Secret).UnmarshalEasyJSON(in)
			}
		case "storageos":
			if in.IsNull() {
				in.Skip()
				out.Storageos = nil
			} else {
				if out.Storageos == nil {
					out.Storageos = new(StorageOSVolumeSource)
				}
				(*out.Storageos).UnmarshalEasyJSON(in)
			}
		case "vsphereVolume":
			if in.IsNull() {
				in.Skip()
				out.VsphereVolume = nil
			} else {
				if out.VsphereVolume == nil {
					out.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				easyjson88542aDecodeGithubComKubewardenK8sObjectsApiCoreV11(in, out.VsphereVolume)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson88542aEncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in Volume) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AwsElasticBlockStore != nil {
		const prefix string = ",\"awsElasticBlockStore\":"
		first = false
		out.RawString(prefix[1:])
		(*in.AwsElasticBlockStore).MarshalEasyJSON(out)
	}
	if in.AzureDisk != nil {
		const prefix string = ",\"azureDisk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AzureDisk).MarshalEasyJSON(out)
	}
	if in.AzureFile != nil {
		const prefix string = ",\"azureFile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.AzureFile).MarshalEasyJSON(out)
	}
	if in.Cephfs != nil {
		const prefix string = ",\"cephfs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Cephfs).MarshalEasyJSON(out)
	}
	if in.Cinder != nil {
		const prefix string = ",\"cinder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Cinder).MarshalEasyJSON(out)
	}
	if in.ConfigMap != nil {
		const prefix string = ",\"configMap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ConfigMap).MarshalEasyJSON(out)
	}
	if in.Csi != nil {
		const prefix string = ",\"csi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Csi).MarshalEasyJSON(out)
	}
	if in.DownwardAPI != nil {
		const prefix string = ",\"downwardAPI\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DownwardAPI).MarshalEasyJSON(out)
	}
	if in.EmptyDir != nil {
		const prefix string = ",\"emptyDir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.EmptyDir).MarshalEasyJSON(out)
	}
	if in.Ephemeral != nil {
		const prefix string = ",\"ephemeral\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Ephemeral).MarshalEasyJSON(out)
	}
	if in.Fc != nil {
		const prefix string = ",\"fc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Fc).MarshalEasyJSON(out)
	}
	if in.FlexVolume != nil {
		const prefix string = ",\"flexVolume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FlexVolume).MarshalEasyJSON(out)
	}
	if in.Flocker != nil {
		const prefix string = ",\"flocker\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Flocker).MarshalEasyJSON(out)
	}
	if in.GcePersistentDisk != nil {
		const prefix string = ",\"gcePersistentDisk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GcePersistentDisk).MarshalEasyJSON(out)
	}
	if in.GitRepo != nil {
		const prefix string = ",\"gitRepo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GitRepo).MarshalEasyJSON(out)
	}
	if in.Glusterfs != nil {
		const prefix string = ",\"glusterfs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Glusterfs).MarshalEasyJSON(out)
	}
	if in.HostPath != nil {
		const prefix string = ",\"hostPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.HostPath).MarshalEasyJSON(out)
	}
	if in.Iscsi != nil {
		const prefix string = ",\"iscsi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Iscsi).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	if in.Nfs != nil {
		const prefix string = ",\"nfs\":"
		out.RawString(prefix)
		(*in.Nfs).MarshalEasyJSON(out)
	}
	if in.PersistentVolumeClaim != nil {
		const prefix string = ",\"persistentVolumeClaim\":"
		out.RawString(prefix)
		(*in.PersistentVolumeClaim).MarshalEasyJSON(out)
	}
	if in.PhotonPersistentDisk != nil {
		const prefix string = ",\"photonPersistentDisk\":"
		out.RawString(prefix)
		(*in.PhotonPersistentDisk).MarshalEasyJSON(out)
	}
	if in.PortworxVolume != nil {
		const prefix string = ",\"portworxVolume\":"
		out.RawString(prefix)
		(*in.PortworxVolume).MarshalEasyJSON(out)
	}
	if in.Projected != nil {
		const prefix string = ",\"projected\":"
		out.RawString(prefix)
		(*in.Projected).MarshalEasyJSON(out)
	}
	if in.Quobyte != nil {
		const prefix string = ",\"quobyte\":"
		out.RawString(prefix)
		(*in.Quobyte).MarshalEasyJSON(out)
	}
	if in.Rbd != nil {
		const prefix string = ",\"rbd\":"
		out.RawString(prefix)
		(*in.Rbd).MarshalEasyJSON(out)
	}
	if in.ScaleIO != nil {
		const prefix string = ",\"scaleIO\":"
		out.RawString(prefix)
		(*in.ScaleIO).MarshalEasyJSON(out)
	}
	if in.Secret != nil {
		const prefix string = ",\"secret\":"
		out.RawString(prefix)
		(*in.Secret).MarshalEasyJSON(out)
	}
	if in.Storageos != nil {
		const prefix string = ",\"storageos\":"
		out.RawString(prefix)
		(*in.Storageos).MarshalEasyJSON(out)
	}
	if in.VsphereVolume != nil {
		const prefix string = ",\"vsphereVolume\":"
		out.RawString(prefix)
		easyjson88542aEncodeGithubComKubewardenK8sObjectsApiCoreV11(out, *in.VsphereVolume)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Volume) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson88542aEncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Volume) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson88542aEncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Volume) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson88542aDecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Volume) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson88542aDecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
func easyjson88542aDecodeGithubComKubewardenK8sObjectsApiCoreV11(in *jlexer.Lexer, out *VsphereVirtualDiskVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fsType":
			out.FsType = string(in.String())
		case "storagePolicyID":
			out.StoragePolicyID = string(in.String())
		case "storagePolicyName":
			out.StoragePolicyName = string(in.String())
		case "volumePath":
			if in.IsNull() {
				in.Skip()
				out.VolumePath = nil
			} else {
				if out.VolumePath == nil {
					out.VolumePath = new(string)
				}
				*out.VolumePath = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson88542aEncodeGithubComKubewardenK8sObjectsApiCoreV11(out *jwriter.Writer, in VsphereVirtualDiskVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FsType != "" {
		const prefix string = ",\"fsType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FsType))
	}
	if in.StoragePolicyID != "" {
		const prefix string = ",\"storagePolicyID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoragePolicyID))
	}
	if in.StoragePolicyName != "" {
		const prefix string = ",\"storagePolicyName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoragePolicyName))
	}
	{
		const prefix string = ",\"volumePath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.VolumePath == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.VolumePath))
		}
	}
	out.RawByte('}')
}
