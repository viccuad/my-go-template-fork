// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	resource "github.com/kubewarden/k8s-objects/apimachinery/pkg/api/resource"
	intstr "github.com/kubewarden/k8s-objects/apimachinery/pkg/util/intstr"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *EphemeralContainer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Args = append(out.Args, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "command":
			if in.IsNull() {
				in.Skip()
				out.Command = nil
			} else {
				in.Delim('[')
				if out.Command == nil {
					if !in.IsDelim(']') {
						out.Command = make([]string, 0, 4)
					} else {
						out.Command = []string{}
					}
				} else {
					out.Command = (out.Command)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Command = append(out.Command, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "env":
			if in.IsNull() {
				in.Skip()
				out.Env = nil
			} else {
				in.Delim('[')
				if out.Env == nil {
					if !in.IsDelim(']') {
						out.Env = make([]*EnvVar, 0, 8)
					} else {
						out.Env = []*EnvVar{}
					}
				} else {
					out.Env = (out.Env)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *EnvVar
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(EnvVar)
						}
						(*v3).UnmarshalEasyJSON(in)
					}
					out.Env = append(out.Env, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "envFrom":
			if in.IsNull() {
				in.Skip()
				out.EnvFrom = nil
			} else {
				in.Delim('[')
				if out.EnvFrom == nil {
					if !in.IsDelim(']') {
						out.EnvFrom = make([]*EnvFromSource, 0, 8)
					} else {
						out.EnvFrom = []*EnvFromSource{}
					}
				} else {
					out.EnvFrom = (out.EnvFrom)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *EnvFromSource
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(EnvFromSource)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.EnvFrom = append(out.EnvFrom, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "image":
			out.Image = string(in.String())
		case "imagePullPolicy":
			out.ImagePullPolicy = string(in.String())
		case "lifecycle":
			if in.IsNull() {
				in.Skip()
				out.Lifecycle = nil
			} else {
				if out.Lifecycle == nil {
					out.Lifecycle = new(Lifecycle)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV11(in, out.Lifecycle)
			}
		case "livenessProbe":
			if in.IsNull() {
				in.Skip()
				out.LivenessProbe = nil
			} else {
				if out.LivenessProbe == nil {
					out.LivenessProbe = new(Probe)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV12(in, out.LivenessProbe)
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "ports":
			if in.IsNull() {
				in.Skip()
				out.Ports = nil
			} else {
				in.Delim('[')
				if out.Ports == nil {
					if !in.IsDelim(']') {
						out.Ports = make([]*ContainerPort, 0, 8)
					} else {
						out.Ports = []*ContainerPort{}
					}
				} else {
					out.Ports = (out.Ports)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *ContainerPort
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(ContainerPort)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.Ports = append(out.Ports, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "readinessProbe":
			if in.IsNull() {
				in.Skip()
				out.ReadinessProbe = nil
			} else {
				if out.ReadinessProbe == nil {
					out.ReadinessProbe = new(Probe)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV12(in, out.ReadinessProbe)
			}
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				if out.Resources == nil {
					out.Resources = new(ResourceRequirements)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV13(in, out.Resources)
			}
		case "securityContext":
			if in.IsNull() {
				in.Skip()
				out.SecurityContext = nil
			} else {
				if out.SecurityContext == nil {
					out.SecurityContext = new(SecurityContext)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV14(in, out.SecurityContext)
			}
		case "startupProbe":
			if in.IsNull() {
				in.Skip()
				out.StartupProbe = nil
			} else {
				if out.StartupProbe == nil {
					out.StartupProbe = new(Probe)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV12(in, out.StartupProbe)
			}
		case "stdin":
			out.Stdin = bool(in.Bool())
		case "stdinOnce":
			out.StdinOnce = bool(in.Bool())
		case "targetContainerName":
			out.TargetContainerName = string(in.String())
		case "terminationMessagePath":
			out.TerminationMessagePath = string(in.String())
		case "terminationMessagePolicy":
			out.TerminationMessagePolicy = string(in.String())
		case "tty":
			out.Tty = bool(in.Bool())
		case "volumeDevices":
			if in.IsNull() {
				in.Skip()
				out.VolumeDevices = nil
			} else {
				in.Delim('[')
				if out.VolumeDevices == nil {
					if !in.IsDelim(']') {
						out.VolumeDevices = make([]*VolumeDevice, 0, 8)
					} else {
						out.VolumeDevices = []*VolumeDevice{}
					}
				} else {
					out.VolumeDevices = (out.VolumeDevices)[:0]
				}
				for !in.IsDelim(']') {
					var v6 *VolumeDevice
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(VolumeDevice)
						}
						easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV15(in, v6)
					}
					out.VolumeDevices = append(out.VolumeDevices, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "volumeMounts":
			if in.IsNull() {
				in.Skip()
				out.VolumeMounts = nil
			} else {
				in.Delim('[')
				if out.VolumeMounts == nil {
					if !in.IsDelim(']') {
						out.VolumeMounts = make([]*VolumeMount, 0, 8)
					} else {
						out.VolumeMounts = []*VolumeMount{}
					}
				} else {
					out.VolumeMounts = (out.VolumeMounts)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *VolumeMount
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(VolumeMount)
						}
						easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV16(in, v7)
					}
					out.VolumeMounts = append(out.VolumeMounts, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "workingDir":
			out.WorkingDir = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in EphemeralContainer) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v8, v9 := range in.Args {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if len(in.Command) != 0 {
		const prefix string = ",\"command\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.Command {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	if len(in.Env) != 0 {
		const prefix string = ",\"env\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.Env {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					(*v13).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.EnvFrom) != 0 {
		const prefix string = ",\"envFrom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.EnvFrom {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Image))
	}
	if in.ImagePullPolicy != "" {
		const prefix string = ",\"imagePullPolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ImagePullPolicy))
	}
	if in.Lifecycle != nil {
		const prefix string = ",\"lifecycle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV11(out, *in.Lifecycle)
	}
	if in.LivenessProbe != nil {
		const prefix string = ",\"livenessProbe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV12(out, *in.LivenessProbe)
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	if len(in.Ports) != 0 {
		const prefix string = ",\"ports\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v16, v17 := range in.Ports {
				if v16 > 0 {
					out.RawByte(',')
				}
				if v17 == nil {
					out.RawString("null")
				} else {
					(*v17).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.ReadinessProbe != nil {
		const prefix string = ",\"readinessProbe\":"
		out.RawString(prefix)
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV12(out, *in.ReadinessProbe)
	}
	if in.Resources != nil {
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV13(out, *in.Resources)
	}
	if in.SecurityContext != nil {
		const prefix string = ",\"securityContext\":"
		out.RawString(prefix)
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV14(out, *in.SecurityContext)
	}
	if in.StartupProbe != nil {
		const prefix string = ",\"startupProbe\":"
		out.RawString(prefix)
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV12(out, *in.StartupProbe)
	}
	if in.Stdin {
		const prefix string = ",\"stdin\":"
		out.RawString(prefix)
		out.Bool(bool(in.Stdin))
	}
	if in.StdinOnce {
		const prefix string = ",\"stdinOnce\":"
		out.RawString(prefix)
		out.Bool(bool(in.StdinOnce))
	}
	if in.TargetContainerName != "" {
		const prefix string = ",\"targetContainerName\":"
		out.RawString(prefix)
		out.String(string(in.TargetContainerName))
	}
	if in.TerminationMessagePath != "" {
		const prefix string = ",\"terminationMessagePath\":"
		out.RawString(prefix)
		out.String(string(in.TerminationMessagePath))
	}
	if in.TerminationMessagePolicy != "" {
		const prefix string = ",\"terminationMessagePolicy\":"
		out.RawString(prefix)
		out.String(string(in.TerminationMessagePolicy))
	}
	if in.Tty {
		const prefix string = ",\"tty\":"
		out.RawString(prefix)
		out.Bool(bool(in.Tty))
	}
	if len(in.VolumeDevices) != 0 {
		const prefix string = ",\"volumeDevices\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v18, v19 := range in.VolumeDevices {
				if v18 > 0 {
					out.RawByte(',')
				}
				if v19 == nil {
					out.RawString("null")
				} else {
					easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV15(out, *v19)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.VolumeMounts) != 0 {
		const prefix string = ",\"volumeMounts\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v20, v21 := range in.VolumeMounts {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV16(out, *v21)
				}
			}
			out.RawByte(']')
		}
	}
	if in.WorkingDir != "" {
		const prefix string = ",\"workingDir\":"
		out.RawString(prefix)
		out.String(string(in.WorkingDir))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EphemeralContainer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EphemeralContainer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EphemeralContainer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EphemeralContainer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
func easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV16(in *jlexer.Lexer, out *VolumeMount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mountPath":
			if in.IsNull() {
				in.Skip()
				out.MountPath = nil
			} else {
				if out.MountPath == nil {
					out.MountPath = new(string)
				}
				*out.MountPath = string(in.String())
			}
		case "mountPropagation":
			out.MountPropagation = string(in.String())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "subPath":
			out.SubPath = string(in.String())
		case "subPathExpr":
			out.SubPathExpr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV16(out *jwriter.Writer, in VolumeMount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mountPath\":"
		out.RawString(prefix[1:])
		if in.MountPath == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.MountPath))
		}
	}
	if in.MountPropagation != "" {
		const prefix string = ",\"mountPropagation\":"
		out.RawString(prefix)
		out.String(string(in.MountPropagation))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	if in.SubPath != "" {
		const prefix string = ",\"subPath\":"
		out.RawString(prefix)
		out.String(string(in.SubPath))
	}
	if in.SubPathExpr != "" {
		const prefix string = ",\"subPathExpr\":"
		out.RawString(prefix)
		out.String(string(in.SubPathExpr))
	}
	out.RawByte('}')
}
func easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV15(in *jlexer.Lexer, out *VolumeDevice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "devicePath":
			if in.IsNull() {
				in.Skip()
				out.DevicePath = nil
			} else {
				if out.DevicePath == nil {
					out.DevicePath = new(string)
				}
				*out.DevicePath = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV15(out *jwriter.Writer, in VolumeDevice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"devicePath\":"
		out.RawString(prefix[1:])
		if in.DevicePath == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.DevicePath))
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	out.RawByte('}')
}
func easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV14(in *jlexer.Lexer, out *SecurityContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allowPrivilegeEscalation":
			out.AllowPrivilegeEscalation = bool(in.Bool())
		case "capabilities":
			if in.IsNull() {
				in.Skip()
				out.Capabilities = nil
			} else {
				if out.Capabilities == nil {
					out.Capabilities = new(Capabilities)
				}
				(*out.Capabilities).UnmarshalEasyJSON(in)
			}
		case "privileged":
			out.Privileged = bool(in.Bool())
		case "procMount":
			out.ProcMount = string(in.String())
		case "readOnlyRootFilesystem":
			out.ReadOnlyRootFilesystem = bool(in.Bool())
		case "runAsGroup":
			out.RunAsGroup = int64(in.Int64())
		case "runAsNonRoot":
			out.RunAsNonRoot = bool(in.Bool())
		case "runAsUser":
			out.RunAsUser = int64(in.Int64())
		case "seLinuxOptions":
			if in.IsNull() {
				in.Skip()
				out.SeLinuxOptions = nil
			} else {
				if out.SeLinuxOptions == nil {
					out.SeLinuxOptions = new(SELinuxOptions)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV17(in, out.SeLinuxOptions)
			}
		case "seccompProfile":
			if in.IsNull() {
				in.Skip()
				out.SeccompProfile = nil
			} else {
				if out.SeccompProfile == nil {
					out.SeccompProfile = new(SeccompProfile)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV18(in, out.SeccompProfile)
			}
		case "windowsOptions":
			if in.IsNull() {
				in.Skip()
				out.WindowsOptions = nil
			} else {
				if out.WindowsOptions == nil {
					out.WindowsOptions = new(WindowsSecurityContextOptions)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV19(in, out.WindowsOptions)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV14(out *jwriter.Writer, in SecurityContext) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AllowPrivilegeEscalation {
		const prefix string = ",\"allowPrivilegeEscalation\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.AllowPrivilegeEscalation))
	}
	if in.Capabilities != nil {
		const prefix string = ",\"capabilities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Capabilities).MarshalEasyJSON(out)
	}
	if in.Privileged {
		const prefix string = ",\"privileged\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Privileged))
	}
	if in.ProcMount != "" {
		const prefix string = ",\"procMount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProcMount))
	}
	if in.ReadOnlyRootFilesystem {
		const prefix string = ",\"readOnlyRootFilesystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ReadOnlyRootFilesystem))
	}
	if in.RunAsGroup != 0 {
		const prefix string = ",\"runAsGroup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RunAsGroup))
	}
	if in.RunAsNonRoot {
		const prefix string = ",\"runAsNonRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RunAsNonRoot))
	}
	if in.RunAsUser != 0 {
		const prefix string = ",\"runAsUser\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RunAsUser))
	}
	if in.SeLinuxOptions != nil {
		const prefix string = ",\"seLinuxOptions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV17(out, *in.SeLinuxOptions)
	}
	if in.SeccompProfile != nil {
		const prefix string = ",\"seccompProfile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV18(out, *in.SeccompProfile)
	}
	if in.WindowsOptions != nil {
		const prefix string = ",\"windowsOptions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV19(out, *in.WindowsOptions)
	}
	out.RawByte('}')
}
func easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV19(in *jlexer.Lexer, out *WindowsSecurityContextOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gmsaCredentialSpec":
			out.GmsaCredentialSpec = string(in.String())
		case "gmsaCredentialSpecName":
			out.GmsaCredentialSpecName = string(in.String())
		case "hostProcess":
			out.HostProcess = bool(in.Bool())
		case "runAsUserName":
			out.RunAsUserName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV19(out *jwriter.Writer, in WindowsSecurityContextOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.GmsaCredentialSpec != "" {
		const prefix string = ",\"gmsaCredentialSpec\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.GmsaCredentialSpec))
	}
	if in.GmsaCredentialSpecName != "" {
		const prefix string = ",\"gmsaCredentialSpecName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GmsaCredentialSpecName))
	}
	if in.HostProcess {
		const prefix string = ",\"hostProcess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HostProcess))
	}
	if in.RunAsUserName != "" {
		const prefix string = ",\"runAsUserName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RunAsUserName))
	}
	out.RawByte('}')
}
func easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV18(in *jlexer.Lexer, out *SeccompProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "localhostProfile":
			out.LocalhostProfile = string(in.String())
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV18(out *jwriter.Writer, in SeccompProfile) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LocalhostProfile != "" {
		const prefix string = ",\"localhostProfile\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.LocalhostProfile))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Type == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Type))
		}
	}
	out.RawByte('}')
}
func easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV17(in *jlexer.Lexer, out *SELinuxOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "level":
			out.Level = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "user":
			out.User = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV17(out *jwriter.Writer, in SELinuxOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Level != "" {
		const prefix string = ",\"level\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Level))
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Role))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	out.RawByte('}')
}
func easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV13(in *jlexer.Lexer, out *ResourceRequirements) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limits":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Limits = make(map[string]*resource.Quantity)
				} else {
					out.Limits = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v22 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(resource.Quantity)
						}
						*v22 = resource.Quantity(in.String())
					}
					(out.Limits)[key] = v22
					in.WantComma()
				}
				in.Delim('}')
			}
		case "requests":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Requests = make(map[string]*resource.Quantity)
				} else {
					out.Requests = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v23 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v23 = nil
					} else {
						if v23 == nil {
							v23 = new(resource.Quantity)
						}
						*v23 = resource.Quantity(in.String())
					}
					(out.Requests)[key] = v23
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV13(out *jwriter.Writer, in ResourceRequirements) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Limits) != 0 {
		const prefix string = ",\"limits\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v24First := true
			for v24Name, v24Value := range in.Limits {
				if v24First {
					v24First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v24Name))
				out.RawByte(':')
				if v24Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v24Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Requests) != 0 {
		const prefix string = ",\"requests\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v25First := true
			for v25Name, v25Value := range in.Requests {
				if v25First {
					v25First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v25Name))
				out.RawByte(':')
				if v25Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v25Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV12(in *jlexer.Lexer, out *Probe) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "exec":
			if in.IsNull() {
				in.Skip()
				out.Exec = nil
			} else {
				if out.Exec == nil {
					out.Exec = new(ExecAction)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV110(in, out.Exec)
			}
		case "failureThreshold":
			out.FailureThreshold = int32(in.Int32())
		case "grpc":
			if in.IsNull() {
				in.Skip()
				out.Grpc = nil
			} else {
				if out.Grpc == nil {
					out.Grpc = new(GRPCAction)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV111(in, out.Grpc)
			}
		case "httpGet":
			if in.IsNull() {
				in.Skip()
				out.HTTPGet = nil
			} else {
				if out.HTTPGet == nil {
					out.HTTPGet = new(HTTPGetAction)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV112(in, out.HTTPGet)
			}
		case "initialDelaySeconds":
			out.InitialDelaySeconds = int32(in.Int32())
		case "periodSeconds":
			out.PeriodSeconds = int32(in.Int32())
		case "successThreshold":
			out.SuccessThreshold = int32(in.Int32())
		case "tcpSocket":
			if in.IsNull() {
				in.Skip()
				out.TCPSocket = nil
			} else {
				if out.TCPSocket == nil {
					out.TCPSocket = new(TCPSocketAction)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV113(in, out.TCPSocket)
			}
		case "terminationGracePeriodSeconds":
			out.TerminationGracePeriodSeconds = int64(in.Int64())
		case "timeoutSeconds":
			out.TimeoutSeconds = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV12(out *jwriter.Writer, in Probe) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Exec != nil {
		const prefix string = ",\"exec\":"
		first = false
		out.RawString(prefix[1:])
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV110(out, *in.Exec)
	}
	if in.FailureThreshold != 0 {
		const prefix string = ",\"failureThreshold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.FailureThreshold))
	}
	if in.Grpc != nil {
		const prefix string = ",\"grpc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV111(out, *in.Grpc)
	}
	if in.HTTPGet != nil {
		const prefix string = ",\"httpGet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV112(out, *in.HTTPGet)
	}
	if in.InitialDelaySeconds != 0 {
		const prefix string = ",\"initialDelaySeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.InitialDelaySeconds))
	}
	if in.PeriodSeconds != 0 {
		const prefix string = ",\"periodSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PeriodSeconds))
	}
	if in.SuccessThreshold != 0 {
		const prefix string = ",\"successThreshold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.SuccessThreshold))
	}
	if in.TCPSocket != nil {
		const prefix string = ",\"tcpSocket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV113(out, *in.TCPSocket)
	}
	if in.TerminationGracePeriodSeconds != 0 {
		const prefix string = ",\"terminationGracePeriodSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TerminationGracePeriodSeconds))
	}
	if in.TimeoutSeconds != 0 {
		const prefix string = ",\"timeoutSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.TimeoutSeconds))
	}
	out.RawByte('}')
}
func easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV113(in *jlexer.Lexer, out *TCPSocketAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "port":
			if in.IsNull() {
				in.Skip()
				out.Port = nil
			} else {
				if out.Port == nil {
					out.Port = new(intstr.IntOrString)
				}
				*out.Port = intstr.IntOrString(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV113(out *jwriter.Writer, in TCPSocketAction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Host != "" {
		const prefix string = ",\"host\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Port == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Port))
		}
	}
	out.RawByte('}')
}
func easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV112(in *jlexer.Lexer, out *HTTPGetAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "httpHeaders":
			if in.IsNull() {
				in.Skip()
				out.HTTPHeaders = nil
			} else {
				in.Delim('[')
				if out.HTTPHeaders == nil {
					if !in.IsDelim(']') {
						out.HTTPHeaders = make([]*HTTPHeader, 0, 8)
					} else {
						out.HTTPHeaders = []*HTTPHeader{}
					}
				} else {
					out.HTTPHeaders = (out.HTTPHeaders)[:0]
				}
				for !in.IsDelim(']') {
					var v26 *HTTPHeader
					if in.IsNull() {
						in.Skip()
						v26 = nil
					} else {
						if v26 == nil {
							v26 = new(HTTPHeader)
						}
						easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV114(in, v26)
					}
					out.HTTPHeaders = append(out.HTTPHeaders, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "path":
			out.Path = string(in.String())
		case "port":
			if in.IsNull() {
				in.Skip()
				out.Port = nil
			} else {
				if out.Port == nil {
					out.Port = new(intstr.IntOrString)
				}
				*out.Port = intstr.IntOrString(in.String())
			}
		case "scheme":
			out.Scheme = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV112(out *jwriter.Writer, in HTTPGetAction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Host != "" {
		const prefix string = ",\"host\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	if len(in.HTTPHeaders) != 0 {
		const prefix string = ",\"httpHeaders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v27, v28 := range in.HTTPHeaders {
				if v27 > 0 {
					out.RawByte(',')
				}
				if v28 == nil {
					out.RawString("null")
				} else {
					easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV114(out, *v28)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Port == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Port))
		}
	}
	if in.Scheme != "" {
		const prefix string = ",\"scheme\":"
		out.RawString(prefix)
		out.String(string(in.Scheme))
	}
	out.RawByte('}')
}
func easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV114(in *jlexer.Lexer, out *HTTPHeader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(string)
				}
				*out.Value = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV114(out *jwriter.Writer, in HTTPHeader) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		if in.Value == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Value))
		}
	}
	out.RawByte('}')
}
func easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV111(in *jlexer.Lexer, out *GRPCAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "port":
			if in.IsNull() {
				in.Skip()
				out.Port = nil
			} else {
				if out.Port == nil {
					out.Port = new(int32)
				}
				*out.Port = int32(in.Int32())
			}
		case "service":
			out.Service = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV111(out *jwriter.Writer, in GRPCAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix[1:])
		if in.Port == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.Port))
		}
	}
	if in.Service != "" {
		const prefix string = ",\"service\":"
		out.RawString(prefix)
		out.String(string(in.Service))
	}
	out.RawByte('}')
}
func easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV110(in *jlexer.Lexer, out *ExecAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "command":
			if in.IsNull() {
				in.Skip()
				out.Command = nil
			} else {
				in.Delim('[')
				if out.Command == nil {
					if !in.IsDelim(']') {
						out.Command = make([]string, 0, 4)
					} else {
						out.Command = []string{}
					}
				} else {
					out.Command = (out.Command)[:0]
				}
				for !in.IsDelim(']') {
					var v29 string
					v29 = string(in.String())
					out.Command = append(out.Command, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV110(out *jwriter.Writer, in ExecAction) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Command) != 0 {
		const prefix string = ",\"command\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v30, v31 := range in.Command {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV11(in *jlexer.Lexer, out *Lifecycle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "postStart":
			if in.IsNull() {
				in.Skip()
				out.PostStart = nil
			} else {
				if out.PostStart == nil {
					out.PostStart = new(LifecycleHandler)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV115(in, out.PostStart)
			}
		case "preStop":
			if in.IsNull() {
				in.Skip()
				out.PreStop = nil
			} else {
				if out.PreStop == nil {
					out.PreStop = new(LifecycleHandler)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV115(in, out.PreStop)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV11(out *jwriter.Writer, in Lifecycle) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PostStart != nil {
		const prefix string = ",\"postStart\":"
		first = false
		out.RawString(prefix[1:])
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV115(out, *in.PostStart)
	}
	if in.PreStop != nil {
		const prefix string = ",\"preStop\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV115(out, *in.PreStop)
	}
	out.RawByte('}')
}
func easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV115(in *jlexer.Lexer, out *LifecycleHandler) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "exec":
			if in.IsNull() {
				in.Skip()
				out.Exec = nil
			} else {
				if out.Exec == nil {
					out.Exec = new(ExecAction)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV110(in, out.Exec)
			}
		case "httpGet":
			if in.IsNull() {
				in.Skip()
				out.HTTPGet = nil
			} else {
				if out.HTTPGet == nil {
					out.HTTPGet = new(HTTPGetAction)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV112(in, out.HTTPGet)
			}
		case "tcpSocket":
			if in.IsNull() {
				in.Skip()
				out.TCPSocket = nil
			} else {
				if out.TCPSocket == nil {
					out.TCPSocket = new(TCPSocketAction)
				}
				easyjson853a9577DecodeGithubComKubewardenK8sObjectsApiCoreV113(in, out.TCPSocket)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV115(out *jwriter.Writer, in LifecycleHandler) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Exec != nil {
		const prefix string = ",\"exec\":"
		first = false
		out.RawString(prefix[1:])
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV110(out, *in.Exec)
	}
	if in.HTTPGet != nil {
		const prefix string = ",\"httpGet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV112(out, *in.HTTPGet)
	}
	if in.TCPSocket != nil {
		const prefix string = ",\"tcpSocket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson853a9577EncodeGithubComKubewardenK8sObjectsApiCoreV113(out, *in.TCPSocket)
	}
	out.RawByte('}')
}
