// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB5c9d911DecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *ContainerState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "running":
			if in.IsNull() {
				in.Skip()
				out.Running = nil
			} else {
				if out.Running == nil {
					out.Running = new(ContainerStateRunning)
				}
				easyjsonB5c9d911DecodeGithubComKubewardenK8sObjectsApiCoreV11(in, out.Running)
			}
		case "terminated":
			if in.IsNull() {
				in.Skip()
				out.Terminated = nil
			} else {
				if out.Terminated == nil {
					out.Terminated = new(ContainerStateTerminated)
				}
				easyjsonB5c9d911DecodeGithubComKubewardenK8sObjectsApiCoreV12(in, out.Terminated)
			}
		case "waiting":
			if in.IsNull() {
				in.Skip()
				out.Waiting = nil
			} else {
				if out.Waiting == nil {
					out.Waiting = new(ContainerStateWaiting)
				}
				easyjsonB5c9d911DecodeGithubComKubewardenK8sObjectsApiCoreV13(in, out.Waiting)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB5c9d911EncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in ContainerState) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Running != nil {
		const prefix string = ",\"running\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonB5c9d911EncodeGithubComKubewardenK8sObjectsApiCoreV11(out, *in.Running)
	}
	if in.Terminated != nil {
		const prefix string = ",\"terminated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB5c9d911EncodeGithubComKubewardenK8sObjectsApiCoreV12(out, *in.Terminated)
	}
	if in.Waiting != nil {
		const prefix string = ",\"waiting\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB5c9d911EncodeGithubComKubewardenK8sObjectsApiCoreV13(out, *in.Waiting)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContainerState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB5c9d911EncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContainerState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB5c9d911EncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContainerState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB5c9d911DecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContainerState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB5c9d911DecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
func easyjsonB5c9d911DecodeGithubComKubewardenK8sObjectsApiCoreV13(in *jlexer.Lexer, out *ContainerStateWaiting) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB5c9d911EncodeGithubComKubewardenK8sObjectsApiCoreV13(out *jwriter.Writer, in ContainerStateWaiting) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Message != "" {
		const prefix string = ",\"message\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Reason))
	}
	out.RawByte('}')
}
func easyjsonB5c9d911DecodeGithubComKubewardenK8sObjectsApiCoreV12(in *jlexer.Lexer, out *ContainerStateTerminated) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "containerID":
			out.ContainerID = string(in.String())
		case "exitCode":
			if in.IsNull() {
				in.Skip()
				out.ExitCode = nil
			} else {
				if out.ExitCode == nil {
					out.ExitCode = new(int32)
				}
				*out.ExitCode = int32(in.Int32())
			}
		case "finishedAt":
			if in.IsNull() {
				in.Skip()
				out.FinishedAt = nil
			} else {
				if out.FinishedAt == nil {
					out.FinishedAt = new(_v1.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FinishedAt).UnmarshalJSON(data))
				}
			}
		case "message":
			out.Message = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "signal":
			out.Signal = int32(in.Int32())
		case "startedAt":
			if in.IsNull() {
				in.Skip()
				out.StartedAt = nil
			} else {
				if out.StartedAt == nil {
					out.StartedAt = new(_v1.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.StartedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB5c9d911EncodeGithubComKubewardenK8sObjectsApiCoreV12(out *jwriter.Writer, in ContainerStateTerminated) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ContainerID != "" {
		const prefix string = ",\"containerID\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ContainerID))
	}
	{
		const prefix string = ",\"exitCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ExitCode == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.ExitCode))
		}
	}
	if in.FinishedAt != nil {
		const prefix string = ",\"finishedAt\":"
		out.RawString(prefix)
		out.Raw((*in.FinishedAt).MarshalJSON())
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	if in.Signal != 0 {
		const prefix string = ",\"signal\":"
		out.RawString(prefix)
		out.Int32(int32(in.Signal))
	}
	if in.StartedAt != nil {
		const prefix string = ",\"startedAt\":"
		out.RawString(prefix)
		out.Raw((*in.StartedAt).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonB5c9d911DecodeGithubComKubewardenK8sObjectsApiCoreV11(in *jlexer.Lexer, out *ContainerStateRunning) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "startedAt":
			if in.IsNull() {
				in.Skip()
				out.StartedAt = nil
			} else {
				if out.StartedAt == nil {
					out.StartedAt = new(_v1.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.StartedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB5c9d911EncodeGithubComKubewardenK8sObjectsApiCoreV11(out *jwriter.Writer, in ContainerStateRunning) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StartedAt != nil {
		const prefix string = ",\"startedAt\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((*in.StartedAt).MarshalJSON())
	}
	out.RawByte('}')
}
