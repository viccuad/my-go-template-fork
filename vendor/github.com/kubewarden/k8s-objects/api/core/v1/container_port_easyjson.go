// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson23d4cc49DecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *ContainerPort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "containerPort":
			if in.IsNull() {
				in.Skip()
				out.ContainerPort = nil
			} else {
				if out.ContainerPort == nil {
					out.ContainerPort = new(int32)
				}
				*out.ContainerPort = int32(in.Int32())
			}
		case "hostIP":
			out.HostIP = string(in.String())
		case "hostPort":
			out.HostPort = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "protocol":
			out.Protocol = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson23d4cc49EncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in ContainerPort) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"containerPort\":"
		out.RawString(prefix[1:])
		if in.ContainerPort == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.ContainerPort))
		}
	}
	if in.HostIP != "" {
		const prefix string = ",\"hostIP\":"
		out.RawString(prefix)
		out.String(string(in.HostIP))
	}
	if in.HostPort != 0 {
		const prefix string = ",\"hostPort\":"
		out.RawString(prefix)
		out.Int32(int32(in.HostPort))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Protocol != "" {
		const prefix string = ",\"protocol\":"
		out.RawString(prefix)
		out.String(string(in.Protocol))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContainerPort) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson23d4cc49EncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContainerPort) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson23d4cc49EncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContainerPort) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson23d4cc49DecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContainerPort) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson23d4cc49DecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
