// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson49067470DecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *VolumeProjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "configMap":
			if in.IsNull() {
				in.Skip()
				out.ConfigMap = nil
			} else {
				if out.ConfigMap == nil {
					out.ConfigMap = new(ConfigMapProjection)
				}
				(*out.ConfigMap).UnmarshalEasyJSON(in)
			}
		case "downwardAPI":
			if in.IsNull() {
				in.Skip()
				out.DownwardAPI = nil
			} else {
				if out.DownwardAPI == nil {
					out.DownwardAPI = new(DownwardAPIProjection)
				}
				(*out.DownwardAPI).UnmarshalEasyJSON(in)
			}
		case "secret":
			if in.IsNull() {
				in.Skip()
				out.Secret = nil
			} else {
				if out.Secret == nil {
					out.Secret = new(SecretProjection)
				}
				(*out.Secret).UnmarshalEasyJSON(in)
			}
		case "serviceAccountToken":
			if in.IsNull() {
				in.Skip()
				out.ServiceAccountToken = nil
			} else {
				if out.ServiceAccountToken == nil {
					out.ServiceAccountToken = new(ServiceAccountTokenProjection)
				}
				(*out.ServiceAccountToken).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49067470EncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in VolumeProjection) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ConfigMap != nil {
		const prefix string = ",\"configMap\":"
		first = false
		out.RawString(prefix[1:])
		(*in.ConfigMap).MarshalEasyJSON(out)
	}
	if in.DownwardAPI != nil {
		const prefix string = ",\"downwardAPI\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DownwardAPI).MarshalEasyJSON(out)
	}
	if in.Secret != nil {
		const prefix string = ",\"secret\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Secret).MarshalEasyJSON(out)
	}
	if in.ServiceAccountToken != nil {
		const prefix string = ",\"serviceAccountToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ServiceAccountToken).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VolumeProjection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49067470EncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VolumeProjection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49067470EncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VolumeProjection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49067470DecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VolumeProjection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49067470DecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
