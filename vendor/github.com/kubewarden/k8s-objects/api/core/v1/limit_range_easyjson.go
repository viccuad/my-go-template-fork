// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	resource "github.com/kubewarden/k8s-objects/apimachinery/pkg/api/resource"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson75f96e95DecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *LimitRange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(_v1.ObjectMeta)
				}
				(*out.Metadata).UnmarshalEasyJSON(in)
			}
		case "spec":
			if in.IsNull() {
				in.Skip()
				out.Spec = nil
			} else {
				if out.Spec == nil {
					out.Spec = new(LimitRangeSpec)
				}
				easyjson75f96e95DecodeGithubComKubewardenK8sObjectsApiCoreV11(in, out.Spec)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson75f96e95EncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in LimitRange) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Metadata).MarshalEasyJSON(out)
	}
	if in.Spec != nil {
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson75f96e95EncodeGithubComKubewardenK8sObjectsApiCoreV11(out, *in.Spec)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitRange) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson75f96e95EncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitRange) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson75f96e95EncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitRange) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson75f96e95DecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitRange) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson75f96e95DecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
func easyjson75f96e95DecodeGithubComKubewardenK8sObjectsApiCoreV11(in *jlexer.Lexer, out *LimitRangeSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limits":
			if in.IsNull() {
				in.Skip()
				out.Limits = nil
			} else {
				in.Delim('[')
				if out.Limits == nil {
					if !in.IsDelim(']') {
						out.Limits = make([]*LimitRangeItem, 0, 8)
					} else {
						out.Limits = []*LimitRangeItem{}
					}
				} else {
					out.Limits = (out.Limits)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *LimitRangeItem
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(LimitRangeItem)
						}
						easyjson75f96e95DecodeGithubComKubewardenK8sObjectsApiCoreV12(in, v1)
					}
					out.Limits = append(out.Limits, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson75f96e95EncodeGithubComKubewardenK8sObjectsApiCoreV11(out *jwriter.Writer, in LimitRangeSpec) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"limits\":"
		out.RawString(prefix[1:])
		if in.Limits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Limits {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjson75f96e95EncodeGithubComKubewardenK8sObjectsApiCoreV12(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson75f96e95DecodeGithubComKubewardenK8sObjectsApiCoreV12(in *jlexer.Lexer, out *LimitRangeItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "default":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Default = make(map[string]*resource.Quantity)
				} else {
					out.Default = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(resource.Quantity)
						}
						*v4 = resource.Quantity(in.String())
					}
					(out.Default)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "defaultRequest":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DefaultRequest = make(map[string]*resource.Quantity)
				} else {
					out.DefaultRequest = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(resource.Quantity)
						}
						*v5 = resource.Quantity(in.String())
					}
					(out.DefaultRequest)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "max":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Max = make(map[string]*resource.Quantity)
				} else {
					out.Max = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(resource.Quantity)
						}
						*v6 = resource.Quantity(in.String())
					}
					(out.Max)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "maxLimitRequestRatio":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.MaxLimitRequestRatio = make(map[string]*resource.Quantity)
				} else {
					out.MaxLimitRequestRatio = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(resource.Quantity)
						}
						*v7 = resource.Quantity(in.String())
					}
					(out.MaxLimitRequestRatio)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "min":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Min = make(map[string]*resource.Quantity)
				} else {
					out.Min = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(resource.Quantity)
						}
						*v8 = resource.Quantity(in.String())
					}
					(out.Min)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson75f96e95EncodeGithubComKubewardenK8sObjectsApiCoreV12(out *jwriter.Writer, in LimitRangeItem) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Default) != 0 {
		const prefix string = ",\"default\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.Default {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				if v9Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v9Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.DefaultRequest) != 0 {
		const prefix string = ",\"defaultRequest\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.DefaultRequest {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				if v10Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v10Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Max) != 0 {
		const prefix string = ",\"max\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Max {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				if v11Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v11Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.MaxLimitRequestRatio) != 0 {
		const prefix string = ",\"maxLimitRequestRatio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.MaxLimitRequestRatio {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				if v12Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v12Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Min) != 0 {
		const prefix string = ",\"min\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.Min {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				if v13Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v13Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Type == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Type))
		}
	}
	out.RawByte('}')
}
