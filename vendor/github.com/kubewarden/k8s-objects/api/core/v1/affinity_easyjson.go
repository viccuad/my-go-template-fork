// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	_v1 "github.com/kubewarden/k8s-objects/apimachinery/pkg/apis/meta/v1"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *Affinity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodeAffinity":
			if in.IsNull() {
				in.Skip()
				out.NodeAffinity = nil
			} else {
				if out.NodeAffinity == nil {
					out.NodeAffinity = new(NodeAffinity)
				}
				easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV11(in, out.NodeAffinity)
			}
		case "podAffinity":
			if in.IsNull() {
				in.Skip()
				out.PodAffinity = nil
			} else {
				if out.PodAffinity == nil {
					out.PodAffinity = new(PodAffinity)
				}
				easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV12(in, out.PodAffinity)
			}
		case "podAntiAffinity":
			if in.IsNull() {
				in.Skip()
				out.PodAntiAffinity = nil
			} else {
				if out.PodAntiAffinity == nil {
					out.PodAntiAffinity = new(PodAntiAffinity)
				}
				easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV13(in, out.PodAntiAffinity)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in Affinity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.NodeAffinity != nil {
		const prefix string = ",\"nodeAffinity\":"
		first = false
		out.RawString(prefix[1:])
		easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV11(out, *in.NodeAffinity)
	}
	if in.PodAffinity != nil {
		const prefix string = ",\"podAffinity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV12(out, *in.PodAffinity)
	}
	if in.PodAntiAffinity != nil {
		const prefix string = ",\"podAntiAffinity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV13(out, *in.PodAntiAffinity)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Affinity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Affinity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Affinity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Affinity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
func easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV13(in *jlexer.Lexer, out *PodAntiAffinity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.PreferredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.PreferredDuringSchedulingIgnoredDuringExecution = make([]*WeightedPodAffinityTerm, 0, 8)
					} else {
						out.PreferredDuringSchedulingIgnoredDuringExecution = []*WeightedPodAffinityTerm{}
					}
				} else {
					out.PreferredDuringSchedulingIgnoredDuringExecution = (out.PreferredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *WeightedPodAffinityTerm
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(WeightedPodAffinityTerm)
						}
						easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV14(in, v1)
					}
					out.PreferredDuringSchedulingIgnoredDuringExecution = append(out.PreferredDuringSchedulingIgnoredDuringExecution, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.RequiredDuringSchedulingIgnoredDuringExecution = make([]*PodAffinityTerm, 0, 8)
					} else {
						out.RequiredDuringSchedulingIgnoredDuringExecution = []*PodAffinityTerm{}
					}
				} else {
					out.RequiredDuringSchedulingIgnoredDuringExecution = (out.RequiredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *PodAffinityTerm
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(PodAffinityTerm)
						}
						easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV15(in, v2)
					}
					out.RequiredDuringSchedulingIgnoredDuringExecution = append(out.RequiredDuringSchedulingIgnoredDuringExecution, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV13(out *jwriter.Writer, in PodAntiAffinity) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.PreferredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"preferredDuringSchedulingIgnoredDuringExecution\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v3, v4 := range in.PreferredDuringSchedulingIgnoredDuringExecution {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV14(out, *v4)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.RequiredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"requiredDuringSchedulingIgnoredDuringExecution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.RequiredDuringSchedulingIgnoredDuringExecution {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV15(out, *v6)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV15(in *jlexer.Lexer, out *PodAffinityTerm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "labelSelector":
			if in.IsNull() {
				in.Skip()
				out.LabelSelector = nil
			} else {
				if out.LabelSelector == nil {
					out.LabelSelector = new(_v1.LabelSelector)
				}
				(*out.LabelSelector).UnmarshalEasyJSON(in)
			}
		case "namespaceSelector":
			if in.IsNull() {
				in.Skip()
				out.NamespaceSelector = nil
			} else {
				if out.NamespaceSelector == nil {
					out.NamespaceSelector = new(_v1.LabelSelector)
				}
				(*out.NamespaceSelector).UnmarshalEasyJSON(in)
			}
		case "namespaces":
			if in.IsNull() {
				in.Skip()
				out.Namespaces = nil
			} else {
				in.Delim('[')
				if out.Namespaces == nil {
					if !in.IsDelim(']') {
						out.Namespaces = make([]string, 0, 4)
					} else {
						out.Namespaces = []string{}
					}
				} else {
					out.Namespaces = (out.Namespaces)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Namespaces = append(out.Namespaces, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topologyKey":
			if in.IsNull() {
				in.Skip()
				out.TopologyKey = nil
			} else {
				if out.TopologyKey == nil {
					out.TopologyKey = new(string)
				}
				*out.TopologyKey = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV15(out *jwriter.Writer, in PodAffinityTerm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LabelSelector != nil {
		const prefix string = ",\"labelSelector\":"
		first = false
		out.RawString(prefix[1:])
		(*in.LabelSelector).MarshalEasyJSON(out)
	}
	if in.NamespaceSelector != nil {
		const prefix string = ",\"namespaceSelector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NamespaceSelector).MarshalEasyJSON(out)
	}
	if len(in.Namespaces) != 0 {
		const prefix string = ",\"namespaces\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Namespaces {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"topologyKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.TopologyKey == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.TopologyKey))
		}
	}
	out.RawByte('}')
}
func easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV14(in *jlexer.Lexer, out *WeightedPodAffinityTerm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "podAffinityTerm":
			if in.IsNull() {
				in.Skip()
				out.PodAffinityTerm = nil
			} else {
				if out.PodAffinityTerm == nil {
					out.PodAffinityTerm = new(PodAffinityTerm)
				}
				easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV15(in, out.PodAffinityTerm)
			}
		case "weight":
			if in.IsNull() {
				in.Skip()
				out.Weight = nil
			} else {
				if out.Weight == nil {
					out.Weight = new(int32)
				}
				*out.Weight = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV14(out *jwriter.Writer, in WeightedPodAffinityTerm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"podAffinityTerm\":"
		out.RawString(prefix[1:])
		if in.PodAffinityTerm == nil {
			out.RawString("null")
		} else {
			easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV15(out, *in.PodAffinityTerm)
		}
	}
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		if in.Weight == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.Weight))
		}
	}
	out.RawByte('}')
}
func easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV12(in *jlexer.Lexer, out *PodAffinity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.PreferredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.PreferredDuringSchedulingIgnoredDuringExecution = make([]*WeightedPodAffinityTerm, 0, 8)
					} else {
						out.PreferredDuringSchedulingIgnoredDuringExecution = []*WeightedPodAffinityTerm{}
					}
				} else {
					out.PreferredDuringSchedulingIgnoredDuringExecution = (out.PreferredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *WeightedPodAffinityTerm
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(WeightedPodAffinityTerm)
						}
						easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV14(in, v10)
					}
					out.PreferredDuringSchedulingIgnoredDuringExecution = append(out.PreferredDuringSchedulingIgnoredDuringExecution, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.RequiredDuringSchedulingIgnoredDuringExecution = make([]*PodAffinityTerm, 0, 8)
					} else {
						out.RequiredDuringSchedulingIgnoredDuringExecution = []*PodAffinityTerm{}
					}
				} else {
					out.RequiredDuringSchedulingIgnoredDuringExecution = (out.RequiredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v11 *PodAffinityTerm
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(PodAffinityTerm)
						}
						easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV15(in, v11)
					}
					out.RequiredDuringSchedulingIgnoredDuringExecution = append(out.RequiredDuringSchedulingIgnoredDuringExecution, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV12(out *jwriter.Writer, in PodAffinity) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.PreferredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"preferredDuringSchedulingIgnoredDuringExecution\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v12, v13 := range in.PreferredDuringSchedulingIgnoredDuringExecution {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV14(out, *v13)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.RequiredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"requiredDuringSchedulingIgnoredDuringExecution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.RequiredDuringSchedulingIgnoredDuringExecution {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV15(out, *v15)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV11(in *jlexer.Lexer, out *NodeAffinity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.PreferredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.PreferredDuringSchedulingIgnoredDuringExecution = make([]*PreferredSchedulingTerm, 0, 8)
					} else {
						out.PreferredDuringSchedulingIgnoredDuringExecution = []*PreferredSchedulingTerm{}
					}
				} else {
					out.PreferredDuringSchedulingIgnoredDuringExecution = (out.PreferredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *PreferredSchedulingTerm
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(PreferredSchedulingTerm)
						}
						easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV16(in, v16)
					}
					out.PreferredDuringSchedulingIgnoredDuringExecution = append(out.PreferredDuringSchedulingIgnoredDuringExecution, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				if out.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					out.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV17(in, out.RequiredDuringSchedulingIgnoredDuringExecution)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV11(out *jwriter.Writer, in NodeAffinity) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.PreferredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"preferredDuringSchedulingIgnoredDuringExecution\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v17, v18 := range in.PreferredDuringSchedulingIgnoredDuringExecution {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV16(out, *v18)
				}
			}
			out.RawByte(']')
		}
	}
	if in.RequiredDuringSchedulingIgnoredDuringExecution != nil {
		const prefix string = ",\"requiredDuringSchedulingIgnoredDuringExecution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV17(out, *in.RequiredDuringSchedulingIgnoredDuringExecution)
	}
	out.RawByte('}')
}
func easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV17(in *jlexer.Lexer, out *NodeSelector) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodeSelectorTerms":
			if in.IsNull() {
				in.Skip()
				out.NodeSelectorTerms = nil
			} else {
				in.Delim('[')
				if out.NodeSelectorTerms == nil {
					if !in.IsDelim(']') {
						out.NodeSelectorTerms = make([]*NodeSelectorTerm, 0, 8)
					} else {
						out.NodeSelectorTerms = []*NodeSelectorTerm{}
					}
				} else {
					out.NodeSelectorTerms = (out.NodeSelectorTerms)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *NodeSelectorTerm
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(NodeSelectorTerm)
						}
						easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV18(in, v19)
					}
					out.NodeSelectorTerms = append(out.NodeSelectorTerms, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV17(out *jwriter.Writer, in NodeSelector) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodeSelectorTerms\":"
		out.RawString(prefix[1:])
		if in.NodeSelectorTerms == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.NodeSelectorTerms {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV18(out, *v21)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV18(in *jlexer.Lexer, out *NodeSelectorTerm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "matchExpressions":
			if in.IsNull() {
				in.Skip()
				out.MatchExpressions = nil
			} else {
				in.Delim('[')
				if out.MatchExpressions == nil {
					if !in.IsDelim(']') {
						out.MatchExpressions = make([]*NodeSelectorRequirement, 0, 8)
					} else {
						out.MatchExpressions = []*NodeSelectorRequirement{}
					}
				} else {
					out.MatchExpressions = (out.MatchExpressions)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *NodeSelectorRequirement
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(NodeSelectorRequirement)
						}
						easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV19(in, v22)
					}
					out.MatchExpressions = append(out.MatchExpressions, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "matchFields":
			if in.IsNull() {
				in.Skip()
				out.MatchFields = nil
			} else {
				in.Delim('[')
				if out.MatchFields == nil {
					if !in.IsDelim(']') {
						out.MatchFields = make([]*NodeSelectorRequirement, 0, 8)
					} else {
						out.MatchFields = []*NodeSelectorRequirement{}
					}
				} else {
					out.MatchFields = (out.MatchFields)[:0]
				}
				for !in.IsDelim(']') {
					var v23 *NodeSelectorRequirement
					if in.IsNull() {
						in.Skip()
						v23 = nil
					} else {
						if v23 == nil {
							v23 = new(NodeSelectorRequirement)
						}
						easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV19(in, v23)
					}
					out.MatchFields = append(out.MatchFields, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV18(out *jwriter.Writer, in NodeSelectorTerm) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.MatchExpressions) != 0 {
		const prefix string = ",\"matchExpressions\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v24, v25 := range in.MatchExpressions {
				if v24 > 0 {
					out.RawByte(',')
				}
				if v25 == nil {
					out.RawString("null")
				} else {
					easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV19(out, *v25)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.MatchFields) != 0 {
		const prefix string = ",\"matchFields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.MatchFields {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV19(out, *v27)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV19(in *jlexer.Lexer, out *NodeSelectorRequirement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "operator":
			if in.IsNull() {
				in.Skip()
				out.Operator = nil
			} else {
				if out.Operator == nil {
					out.Operator = new(string)
				}
				*out.Operator = string(in.String())
			}
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]string, 0, 4)
					} else {
						out.Values = []string{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.Values = append(out.Values, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV19(out *jwriter.Writer, in NodeSelectorRequirement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		if in.Key == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Key))
		}
	}
	{
		const prefix string = ",\"operator\":"
		out.RawString(prefix)
		if in.Operator == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Operator))
		}
	}
	if len(in.Values) != 0 {
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v29, v30 := range in.Values {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV16(in *jlexer.Lexer, out *PreferredSchedulingTerm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "preference":
			if in.IsNull() {
				in.Skip()
				out.Preference = nil
			} else {
				if out.Preference == nil {
					out.Preference = new(NodeSelectorTerm)
				}
				easyjson7ce16f98DecodeGithubComKubewardenK8sObjectsApiCoreV18(in, out.Preference)
			}
		case "weight":
			if in.IsNull() {
				in.Skip()
				out.Weight = nil
			} else {
				if out.Weight == nil {
					out.Weight = new(int32)
				}
				*out.Weight = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV16(out *jwriter.Writer, in PreferredSchedulingTerm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"preference\":"
		out.RawString(prefix[1:])
		if in.Preference == nil {
			out.RawString("null")
		} else {
			easyjson7ce16f98EncodeGithubComKubewardenK8sObjectsApiCoreV18(out, *in.Preference)
		}
	}
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		if in.Weight == nil {
			out.RawString("null")
		} else {
			out.Int32(int32(*in.Weight))
		}
	}
	out.RawByte('}')
}
