// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	resource "github.com/kubewarden/k8s-objects/apimachinery/pkg/api/resource"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson93188a3bDecodeGithubComKubewardenK8sObjectsApiCoreV1(in *jlexer.Lexer, out *LimitRangeItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "default":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Default = make(map[string]*resource.Quantity)
				} else {
					out.Default = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(resource.Quantity)
						}
						*v1 = resource.Quantity(in.String())
					}
					(out.Default)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "defaultRequest":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DefaultRequest = make(map[string]*resource.Quantity)
				} else {
					out.DefaultRequest = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(resource.Quantity)
						}
						*v2 = resource.Quantity(in.String())
					}
					(out.DefaultRequest)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "max":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Max = make(map[string]*resource.Quantity)
				} else {
					out.Max = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(resource.Quantity)
						}
						*v3 = resource.Quantity(in.String())
					}
					(out.Max)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "maxLimitRequestRatio":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.MaxLimitRequestRatio = make(map[string]*resource.Quantity)
				} else {
					out.MaxLimitRequestRatio = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(resource.Quantity)
						}
						*v4 = resource.Quantity(in.String())
					}
					(out.MaxLimitRequestRatio)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "min":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Min = make(map[string]*resource.Quantity)
				} else {
					out.Min = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 *resource.Quantity
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(resource.Quantity)
						}
						*v5 = resource.Quantity(in.String())
					}
					(out.Min)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson93188a3bEncodeGithubComKubewardenK8sObjectsApiCoreV1(out *jwriter.Writer, in LimitRangeItem) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Default) != 0 {
		const prefix string = ",\"default\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Default {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				if v6Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v6Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.DefaultRequest) != 0 {
		const prefix string = ",\"defaultRequest\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.DefaultRequest {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				if v7Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v7Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Max) != 0 {
		const prefix string = ",\"max\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Max {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				if v8Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v8Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.MaxLimitRequestRatio) != 0 {
		const prefix string = ",\"maxLimitRequestRatio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.MaxLimitRequestRatio {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				if v9Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v9Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Min) != 0 {
		const prefix string = ",\"min\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Min {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				if v10Value == nil {
					out.RawString("null")
				} else {
					out.String(string(*v10Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Type == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Type))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitRangeItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson93188a3bEncodeGithubComKubewardenK8sObjectsApiCoreV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitRangeItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson93188a3bEncodeGithubComKubewardenK8sObjectsApiCoreV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitRangeItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson93188a3bDecodeGithubComKubewardenK8sObjectsApiCoreV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitRangeItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson93188a3bDecodeGithubComKubewardenK8sObjectsApiCoreV1(l, v)
}
