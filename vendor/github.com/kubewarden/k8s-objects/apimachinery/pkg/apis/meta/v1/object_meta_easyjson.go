// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7cd974a5DecodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(in *jlexer.Lexer, out *ObjectMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Annotations = make(map[string]string)
				} else {
					out.Annotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Annotations)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "clusterName":
			out.ClusterName = string(in.String())
		case "creationTimestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationTimestamp).UnmarshalJSON(data))
			}
		case "deletionGracePeriodSeconds":
			out.DeletionGracePeriodSeconds = int64(in.Int64())
		case "deletionTimestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DeletionTimestamp).UnmarshalJSON(data))
			}
		case "finalizers":
			if in.IsNull() {
				in.Skip()
				out.Finalizers = nil
			} else {
				in.Delim('[')
				if out.Finalizers == nil {
					if !in.IsDelim(']') {
						out.Finalizers = make([]string, 0, 4)
					} else {
						out.Finalizers = []string{}
					}
				} else {
					out.Finalizers = (out.Finalizers)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Finalizers = append(out.Finalizers, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "generateName":
			out.GenerateName = string(in.String())
		case "generation":
			out.Generation = int64(in.Int64())
		case "labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Labels = make(map[string]string)
				} else {
					out.Labels = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 string
					v3 = string(in.String())
					(out.Labels)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "managedFields":
			if in.IsNull() {
				in.Skip()
				out.ManagedFields = nil
			} else {
				in.Delim('[')
				if out.ManagedFields == nil {
					if !in.IsDelim(']') {
						out.ManagedFields = make([]*ManagedFieldsEntry, 0, 8)
					} else {
						out.ManagedFields = []*ManagedFieldsEntry{}
					}
				} else {
					out.ManagedFields = (out.ManagedFields)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *ManagedFieldsEntry
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(ManagedFieldsEntry)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.ManagedFields = append(out.ManagedFields, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		case "ownerReferences":
			if in.IsNull() {
				in.Skip()
				out.OwnerReferences = nil
			} else {
				in.Delim('[')
				if out.OwnerReferences == nil {
					if !in.IsDelim(']') {
						out.OwnerReferences = make([]*OwnerReference, 0, 8)
					} else {
						out.OwnerReferences = []*OwnerReference{}
					}
				} else {
					out.OwnerReferences = (out.OwnerReferences)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *OwnerReference
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(OwnerReference)
						}
						easyjson7cd974a5DecodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV11(in, v5)
					}
					out.OwnerReferences = append(out.OwnerReferences, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resourceVersion":
			out.ResourceVersion = string(in.String())
		case "selfLink":
			out.SelfLink = string(in.String())
		case "uid":
			out.UID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7cd974a5EncodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(out *jwriter.Writer, in ObjectMeta) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Annotations {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				out.String(string(v6Value))
			}
			out.RawByte('}')
		}
	}
	if in.ClusterName != "" {
		const prefix string = ",\"clusterName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClusterName))
	}
	if true {
		const prefix string = ",\"creationTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreationTimestamp).MarshalJSON())
	}
	if in.DeletionGracePeriodSeconds != 0 {
		const prefix string = ",\"deletionGracePeriodSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DeletionGracePeriodSeconds))
	}
	if true {
		const prefix string = ",\"deletionTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.DeletionTimestamp).MarshalJSON())
	}
	if len(in.Finalizers) != 0 {
		const prefix string = ",\"finalizers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.Finalizers {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	if in.GenerateName != "" {
		const prefix string = ",\"generateName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GenerateName))
	}
	if in.Generation != 0 {
		const prefix string = ",\"generation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Generation))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.Labels {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				out.String(string(v9Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.ManagedFields) != 0 {
		const prefix string = ",\"managedFields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.ManagedFields {
				if v10 > 0 {
					out.RawByte(',')
				}
				if v11 == nil {
					out.RawString("null")
				} else {
					(*v11).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Namespace != "" {
		const prefix string = ",\"namespace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Namespace))
	}
	if len(in.OwnerReferences) != 0 {
		const prefix string = ",\"ownerReferences\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.OwnerReferences {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					easyjson7cd974a5EncodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV11(out, *v13)
				}
			}
			out.RawByte(']')
		}
	}
	if in.ResourceVersion != "" {
		const prefix string = ",\"resourceVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResourceVersion))
	}
	if in.SelfLink != "" {
		const prefix string = ",\"selfLink\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SelfLink))
	}
	if in.UID != "" {
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ObjectMeta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7cd974a5EncodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ObjectMeta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7cd974a5EncodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ObjectMeta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7cd974a5DecodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ObjectMeta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7cd974a5DecodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(l, v)
}
func easyjson7cd974a5DecodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV11(in *jlexer.Lexer, out *OwnerReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			if in.IsNull() {
				in.Skip()
				out.APIVersion = nil
			} else {
				if out.APIVersion == nil {
					out.APIVersion = new(string)
				}
				*out.APIVersion = string(in.String())
			}
		case "blockOwnerDeletion":
			out.BlockOwnerDeletion = bool(in.Bool())
		case "controller":
			out.Controller = bool(in.Bool())
		case "kind":
			if in.IsNull() {
				in.Skip()
				out.Kind = nil
			} else {
				if out.Kind == nil {
					out.Kind = new(string)
				}
				*out.Kind = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "uid":
			if in.IsNull() {
				in.Skip()
				out.UID = nil
			} else {
				if out.UID == nil {
					out.UID = new(string)
				}
				*out.UID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7cd974a5EncodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV11(out *jwriter.Writer, in OwnerReference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apiVersion\":"
		out.RawString(prefix[1:])
		if in.APIVersion == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.APIVersion))
		}
	}
	if in.BlockOwnerDeletion {
		const prefix string = ",\"blockOwnerDeletion\":"
		out.RawString(prefix)
		out.Bool(bool(in.BlockOwnerDeletion))
	}
	if in.Controller {
		const prefix string = ",\"controller\":"
		out.RawString(prefix)
		out.Bool(bool(in.Controller))
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		if in.Kind == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Kind))
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		if in.UID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.UID))
		}
	}
	out.RawByte('}')
}
