// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8586501eDecodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(in *jlexer.Lexer, out *LabelSelector) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "matchExpressions":
			if in.IsNull() {
				in.Skip()
				out.MatchExpressions = nil
			} else {
				in.Delim('[')
				if out.MatchExpressions == nil {
					if !in.IsDelim(']') {
						out.MatchExpressions = make([]*LabelSelectorRequirement, 0, 8)
					} else {
						out.MatchExpressions = []*LabelSelectorRequirement{}
					}
				} else {
					out.MatchExpressions = (out.MatchExpressions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *LabelSelectorRequirement
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(LabelSelectorRequirement)
						}
						easyjson8586501eDecodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV11(in, v1)
					}
					out.MatchExpressions = append(out.MatchExpressions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "matchLabels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.MatchLabels = make(map[string]string)
				} else {
					out.MatchLabels = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.MatchLabels)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8586501eEncodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(out *jwriter.Writer, in LabelSelector) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.MatchExpressions) != 0 {
		const prefix string = ",\"matchExpressions\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v3, v4 := range in.MatchExpressions {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					easyjson8586501eEncodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV11(out, *v4)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.MatchLabels) != 0 {
		const prefix string = ",\"matchLabels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.MatchLabels {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.String(string(v5Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LabelSelector) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8586501eEncodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LabelSelector) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8586501eEncodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LabelSelector) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8586501eDecodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LabelSelector) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8586501eDecodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(l, v)
}
func easyjson8586501eDecodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV11(in *jlexer.Lexer, out *LabelSelectorRequirement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "operator":
			if in.IsNull() {
				in.Skip()
				out.Operator = nil
			} else {
				if out.Operator == nil {
					out.Operator = new(string)
				}
				*out.Operator = string(in.String())
			}
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]string, 0, 4)
					} else {
						out.Values = []string{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.Values = append(out.Values, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8586501eEncodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV11(out *jwriter.Writer, in LabelSelectorRequirement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		if in.Key == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Key))
		}
	}
	{
		const prefix string = ",\"operator\":"
		out.RawString(prefix)
		if in.Operator == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Operator))
		}
	}
	if len(in.Values) != 0 {
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v7, v8 := range in.Values {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
