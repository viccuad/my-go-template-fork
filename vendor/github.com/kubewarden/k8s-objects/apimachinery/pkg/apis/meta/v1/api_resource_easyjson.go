// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEdf567a7DecodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(in *jlexer.Lexer, out *APIResource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]string, 0, 4)
					} else {
						out.Categories = []string{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Categories = append(out.Categories, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "group":
			out.Group = string(in.String())
		case "kind":
			if in.IsNull() {
				in.Skip()
				out.Kind = nil
			} else {
				if out.Kind == nil {
					out.Kind = new(string)
				}
				*out.Kind = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "namespaced":
			if in.IsNull() {
				in.Skip()
				out.Namespaced = nil
			} else {
				if out.Namespaced == nil {
					out.Namespaced = new(bool)
				}
				*out.Namespaced = bool(in.Bool())
			}
		case "shortNames":
			if in.IsNull() {
				in.Skip()
				out.ShortNames = nil
			} else {
				in.Delim('[')
				if out.ShortNames == nil {
					if !in.IsDelim(']') {
						out.ShortNames = make([]string, 0, 4)
					} else {
						out.ShortNames = []string{}
					}
				} else {
					out.ShortNames = (out.ShortNames)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.ShortNames = append(out.ShortNames, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "singularName":
			if in.IsNull() {
				in.Skip()
				out.SingularName = nil
			} else {
				if out.SingularName == nil {
					out.SingularName = new(string)
				}
				*out.SingularName = string(in.String())
			}
		case "storageVersionHash":
			out.StorageVersionHash = string(in.String())
		case "verbs":
			if in.IsNull() {
				in.Skip()
				out.Verbs = nil
			} else {
				in.Delim('[')
				if out.Verbs == nil {
					if !in.IsDelim(']') {
						out.Verbs = make([]string, 0, 4)
					} else {
						out.Verbs = []string{}
					}
				} else {
					out.Verbs = (out.Verbs)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Verbs = append(out.Verbs, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEdf567a7EncodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(out *jwriter.Writer, in APIResource) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Categories) != 0 {
		const prefix string = ",\"categories\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v4, v5 := range in.Categories {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Kind == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Kind))
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"namespaced\":"
		out.RawString(prefix)
		if in.Namespaced == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Namespaced))
		}
	}
	if len(in.ShortNames) != 0 {
		const prefix string = ",\"shortNames\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v6, v7 := range in.ShortNames {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"singularName\":"
		out.RawString(prefix)
		if in.SingularName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.SingularName))
		}
	}
	if in.StorageVersionHash != "" {
		const prefix string = ",\"storageVersionHash\":"
		out.RawString(prefix)
		out.String(string(in.StorageVersionHash))
	}
	{
		const prefix string = ",\"verbs\":"
		out.RawString(prefix)
		if in.Verbs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Verbs {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIResource) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEdf567a7EncodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIResource) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEdf567a7EncodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIResource) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEdf567a7DecodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIResource) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEdf567a7DecodeGithubComKubewardenK8sObjectsApimachineryPkgApisMetaV1(l, v)
}
